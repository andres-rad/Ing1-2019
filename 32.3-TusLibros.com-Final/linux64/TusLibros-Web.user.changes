

----SNAPSHOT----(9 July 2019 20:43:38) TusLibros-Web.image priorSource: 14586977!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 20:53:59' prior: 50792009!
sendCatalogRequest
	catalog _ webClient catalog.
	self triggerEvent: #catalogArrived.! !
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 20:54:06' prior: 50791062!
catalog
	^catalog keysAndValuesDo: [ :titulo :valor | catalog add: titulo, '  $', valor asString].! !

CreateCartWindow open.!

!classDefinition: #CreateCartWindowModel category: #'TusLibros-Web'!
Object subclass: #CreateCartWindowModel
	instanceVariableNames: 'username password webClient cartId catalog catalogIndex cartContents cartContentsIndex listableCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 20:55:43' prior: 50792409!
sendCatalogRequest
	catalog _ webClient catalog.
	listableCatalog _ nil.
	
	self triggerEvent: #catalogArrived.! !
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 20:55:56' prior: 50792415!
catalog
	^listableCatalog .! !
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 20:56:20'!
listableCatalog
	^listableCatalog .! !

CreateCartWindowModel removeSelector: #catalog!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 20:56:41' prior: 50792432!
sendCatalogRequest
	catalog _ webClient catalog.
	listableCatalog _ catalog keysAndValuesDo: [ :titulo :valor | catalog add: titulo, '  $', valor asString].
	
	self triggerEvent: #catalogArrived.! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'ar 7/9/2019 20:56:50' prior: 50791100!
buildCatalogColumn
	|addToCartButton|
	catalogList _ 
		PluggableListMorph model: self model
								listGetter: #listableCatalog
								indexGetter: #catalogIndex
								indexSetter: #catalogIndex:.
	
	addToCartButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #addToCartList
									label: 'Agregar al carrito'.
	
	^ (LayoutMorph newColumn)
					    separation: 15;
					    padding: #left;
					    addMorph: (StringMorph contents: 'Catálogo:');
					    addMorph: catalogList;
					    addMorph: addToCartButton.! !

CreateCartWindow open.!

aDefaultServerController stopListening ; destroy.!

testObjectsFactory _ TusLibrosWebTestObjectFactory new.
aSystemFacade _ testObjectsFactory tusLibrosSystemFacade. 
aDefaultServerController _ TusLibrosServerController listeningOn: 8080 withFacade: aSystemFacade.
!

CreateCartWindow open.!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'ar 7/9/2019 20:56:50' prior: 50792459!
buildCatalogColumn
	|addToCartButton|
	catalogList _ 
		PluggableListMorph model: self model
								listGetter: #listableCatalog
								indexGetter: #catalogIndex
								indexSetter: #catalogIndex:.
	
	addToCartButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #addToCartList
									label: 'Agregar al carrito'.
	
	^ (LayoutMorph newColumn)
					    separation: 15;
					    padding: #left;
					    addMorph: (StringMorph contents: 'Catálogo:');
					    addMorph: catalogList;
					    addMorph: addToCartButton.! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'ar 7/9/2019 20:58:15' prior: 50792490!
buildCatalogColumn
	|addToCartButton|
	catalogList _ 
		PluggableListMorph model: self model
								listGetter: #catalog
								indexGetter: #catalogIndex
								indexSetter: #catalogIndex:.
	
	addToCartButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #addToCartList
									label: 'Agregar al carrito'.
	
	^ (LayoutMorph newColumn)
					    separation: 15;
					    padding: #left;
					    addMorph: (StringMorph contents: 'Catálogo:');
					    addMorph: catalogList;
					    addMorph: addToCartButton.! !
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 20:58:33'!
catalog
	^listableCatalog .! !

CreateCartWindowModel removeSelector: #listableCatalog!

!classDefinition: #CreateCartWindowModel category: #'TusLibros-Web'!
Object subclass: #CreateCartWindowModel
	instanceVariableNames: 'username password webClient cartId catalog catalogIndex cartContents cartContentsIndex listableCatalog catalogAsDict'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 20:58:54' prior: 50792449!
sendCatalogRequest
	catalogAsDict _ webClient catalog.
	catalog _ catalogAsDict keysAndValuesDo: [ :titulo :valor | catalog add: titulo, '  $', valor asString].
	
	self triggerEvent: #catalogArrived.! !

CreateCartWindow open.!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 20:59:32' prior: 50792531!
catalog
	^catalog .! !

CreateCartWindow open.!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:00:36' prior: 50792557!
catalog
	^catalog.! !

CreateCartWindow open.!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:01:47' prior: 50792547!
sendCatalogRequest
	catalogAsDict _ webClient catalog.
	catalog _ catalogAsDict keysAndValuesDo: [ :titulo :valor | catalog add: titulo, '  $', valor asString].
	self halt.
	self triggerEvent: #catalogArrived.! !

CreateCartWindow open.!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:02:17' prior: 50792567!
sendCatalogRequest
	catalogAsDict _ webClient catalog.
	catalog _ OrderedCollection new.
	catalog _ catalogAsDict keysAndValuesDo: [ :titulo :valor | catalog add: titulo, '  $', valor asString].
	self halt.
	self triggerEvent: #catalogArrived.! !
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:02:20' prior: 50792578!
sendCatalogRequest
	catalogAsDict _ webClient catalog.
	catalog _ OrderedCollection new.
	catalog _ catalogAsDict keysAndValuesDo: [ :titulo :valor | catalog add: titulo, '  $', valor asString].
	self triggerEvent: #catalogArrived.! !
!CreateCartWindowModel methodsFor: 'accessing' stamp: 'ar 7/9/2019 21:02:40' prior: 50791159!
initialize
	webClient _ TusLibrosWebClient new.
	username _ ''.
	password _ ''.
	catalogIndex _ 0.
	cartContents _ OrderedCollection new.
	cartContentsIndex _ 0.! !

CreateCartWindow open.!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:03:09' prior: 50792589!
sendCatalogRequest
	catalogAsDict _ webClient catalog.
	catalog _ OrderedCollection new.
	catalog _ catalogAsDict keysAndValuesDo: [ :titulo :valor | catalog add: titulo, '  $', valor asString].
	self halt.
	self triggerEvent: #catalogArrived.! !

CreateCartWindow open.!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:03:40' prior: 50792609!
sendCatalogRequest
	catalogAsDict _ webClient catalog.
	catalog _ OrderedCollection new.
	catalogAsDict keysAndValuesDo: [ :titulo :valor | catalog add: titulo, '  $', valor asString].
	self halt.
	self triggerEvent: #catalogArrived.! !
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:03:43' prior: 50792621!
sendCatalogRequest
	catalogAsDict _ webClient catalog.
	catalog _ OrderedCollection new.
	catalogAsDict keysAndValuesDo: [ :titulo :valor | catalog add: titulo, '  $', valor asString].
	self triggerEvent: #catalogArrived.! !

CreateCartWindow open.!

CreateCartWindow open.!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:04:22' prior: 50792562!
catalog
	^catalogAsDict keysAndValuesDo: [ :titulo :valor | catalog add: titulo, '  $', valor asString].! !

CreateCartWindow open.!

CreateCartWindow open.!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:05:31' prior: 50792644!
catalog
	|catalogAsList|
	catalogAsList _ OrderedCollection new.
	catalogAsDict keysAndValuesDo: [ :titulo :valor | catalogAsList add: titulo, '  $', valor asString].
	^catalogAsList ! !
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:05:33' prior: 50792652!
catalog
	|catalogAsList|
	catalogAsList _ OrderedCollection new.
	catalogAsDict keysAndValuesDo: [ :titulo :valor | catalogAsList add: titulo, '  $', valor asString].
	^catalogAsList.! !

CreateCartWindow open.!
!CreateCartWindowModel methodsFor: 'catalog' stamp: 'ar 7/9/2019 21:05:46' prior: 50792661!
catalog
	^catalog! !

CreateCartWindow open.!

----SNAPSHOT----(9 July 2019 21:06:39) TusLibros-Web.image priorSource: 14744162!

----STARTUP---- (9 July 2019 22:34:18) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


TusLibrosServerController allInstances do: [:in | in stopListening; destroy ].!

TusLibrosServerController allInstances do: [:in | in port].!

TusLibrosServerController allInstances do: [:in | ^in port].!

CreateCartWindow open.!

testObjectsFactory _ TusLibrosWebTestObjectFactory new.!

aSystemFacade _ testObjectsFactory tusLibrosSystemFacade. !

aDefaultServerController _ TusLibrosServerController listeningOn: 8080 withFacade: aSystemFacade.!

CreateCartWindow open.!
!TusLibrosServerControllerTest methodsFor: 'test - port' stamp: 'tf 7/9/2019 22:40:44' prior: 50789747!
test02PuedoCrearUnaInstanciaDelServidorQueEscucheEnUnPuertoEspecifico
	| aServerController |
	
	aServerController _ TusLibrosServerController listeningOn: 8888 withFacade: aSystemFacade.
	self assert: (aServerController port = 8888).
	
	aServerController stopListening ; destroy .! !

TusLibrosServerController allInstances do: [:in | ^in stopListening ; destroy].!

TusLibrosServerController allInstances do: [:in | in stopListening ; destroy].!

testObjectsFactory _ TusLibrosWebTestObjectFactory new.!

aSystemFacade _ testObjectsFactory tusLibrosSystemFacade. !

aDefaultServerController _ TusLibrosServerController listeningOn: 8080 withFacade: aSystemFacade.!

aDefaultServerController stopListening ; destroy.!

aDefaultServerController stopListening ; destroy.!
!TusLibrosWebTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:43:24' prior: 50790786!
tusLibrosSystemFacade
	
	^TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords 
		acceptingItemsOf:  storeTestObjectsFactory defaultCatalog
		registeringOn: self createSalesBook 
		debitingThrought: self
		measuringTimeWith: DateAndTime
! !
!TusLibrosWebTestObjectFactory methodsFor: 'nil' stamp: 'tf 7/9/2019 22:43:32'!
initialize
	storeTestObjectsFactory _ StoreTestObjectsFactory new.! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:45:11'!
test09
	||
	

		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/catalog'.
		(WebResponse protocol: 'http' code: 404) content: (WebUtils jsonEncode: 'Error!!!!') 
	].

	self should: [defaultWebClient catalog ]
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Error!!!!'.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:45:16' prior: 50792742!
test09
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/catalog'.
		(WebResponse protocol: 'http' code: 404) content: (WebUtils jsonEncode: 'Error!!!!') 
	].

	self should: [defaultWebClient catalog ]
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Error!!!!'.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:45:35' prior: 50792756!
test09
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/catalog'.
		(WebResponse protocol: 'http' code: 404) content: 'Error!!!!' 
	].

	self should: [defaultWebClient catalog ]
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Error!!!!'.
! !
!TusLibrosWebClient methodsFor: 'nil' stamp: 'tf 7/9/2019 22:48:13'!
add: anAmount of: aBook toCartIdentifiedAs: aCartId! !
!TusLibrosWebClient methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:48:22'!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear! !
!TusLibrosWebClient methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:48:45'!
listPurchasesOf: aUser authenticatingWith: aPassword! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:50:00'!
test10PuedoAgregarCosasAUnCarrito
	| catalogResponse catalog|
	
	catalog _ Dictionary newFromPairs: {'book1' . 23 . 'book2' . 300 . 'book3'. 1000}.
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/addtocart'.
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: 0) 
	].

	catalogResponse _ defaultWebClient catalog.
	
	self assert: catalogResponse equals: catalog.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:51:48' prior: 50792799!
test10PuedoAgregarCosasAUnCarrito
	| addToCartResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/addtocart'.
		self assert: (fields at: 'cartId') equals: 23.
		self assert: (fields at: 'bookISBN') equals: 'validBook'.
		self assert: (fields at: 'bookQuantity') equals: 3.
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: 0) 
	].

	addToCartResponse _ defaultWebClient add: 3 of: 'validBook' toCartIdentifiedAs: 23 .
	
	self assert: addToCartResponse equals: 0.
! !
!TusLibrosWebClient methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:53:45' prior: 50792782!
add: anAmount of: aBook toCartIdentifiedAs: aCartId
	| queryParams response |

	queryParams _ Dictionary new 
			at: 'cartId' put: anAmount; 
			at: 'bookISBN' put: aBook; 
			at: 'cartId' put: aCartId ; 
			yourself .
	response _ webClient htmlSubmit: (self url, TusLibrosServerController addToCartEndpoint ) fields: queryParams. 
	
	response isSuccess
		ifTrue: [
				^WebUtils jsonDecode: response content readStream .
			]
		ifFalse: [
				self error: response content .
			].! !
!TusLibrosWebClient methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:54:05' prior: 50792837!
add: anAmount of: aBook toCartIdentifiedAs: aCartId
	| queryParams response |

	queryParams _ Dictionary new 
			at: 'bookQuantity' put: anAmount; 
			at: 'bookISBN' put: aBook; 
			at: 'cartId' put: aCartId ; 
			yourself .
	response _ webClient htmlSubmit: (self url, TusLibrosServerController addToCartEndpoint ) fields: queryParams. 
	
	response isSuccess
		ifTrue: [
				^WebUtils jsonDecode: response content readStream .
			]
		ifFalse: [
				self error: response content .
			].! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:55:19'!
test11SiElServerDaUnErrorAlAgregarCosasAUnCarritoLevantoUnaExcepcion
	| addToCartResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/addtocart'.
		self assert: (fields at: 'cartId') equals: 23.
		self assert: (fields at: 'bookISBN') equals: 'validBook'.
		self assert: (fields at: 'bookQuantity') equals: 3.
		(WebResponse protocol: 'http' code: 404) content: 'Error!!'.
	].

	self should: [defaultWebClient add: 3 of: 'validBook' toCartIdentifiedAs: 23] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Error!!'.

	

! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:58:04'!
test12PuedoHacerCheckoutDeUnCarrito
	| checkoutResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/addtocart'.
		self assert: (fields at: 'cartId') equals: 23.
		self assert: (fields at: 'creditCardNumber') equals: '0000111122223333'.
		self assert: (fields at: 'ownersName') equals: 'Teo'.
		self assert: (fields at: 'expirationDate') equals: July/2020.
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: 0) 
	].

	checkoutResponse _ defaultWebClient 
		checkOutCartIdentifiedAs: 23 
		withCreditCardNumbered: '0000111122223333' 
		ownedBy: 'Teo' 
		expiringOn: July/2020 .
	
	self assert: checkoutResponse equals: 0.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:58:55' prior: 50792897!
test12PuedoHacerCheckoutDeUnCarrito
	| checkoutResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/addtocart'.
		self assert: (fields at: 'cartId') equals: 23.
		self assert: (fields at: 'creditCardNumber') equals: '0000111122223333'.
		self assert: (fields at: 'ownersName') equals: 'Teo'.
		self assert: (fields at: 'expirationDate') equals: (Month month: July year: 2020).
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: 0) 
	].

	checkoutResponse _ defaultWebClient 
		checkOutCartIdentifiedAs: 23 
		withCreditCardNumbered: '0000111122223333' 
		ownedBy: 'Teo' 
		expiringOn: (Month month: July year: 2020) .
	
	self assert: checkoutResponse equals: 0.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 22:59:27' prior: 50792923!
test12PuedoHacerCheckoutDeUnCarrito
	| checkoutResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/addtocart'.
		self assert: (fields at: 'cartId') equals: 23.
		self assert: (fields at: 'creditCardNumber') equals: '0000111122223333'.
		self assert: (fields at: 'ownersName') equals: 'Teo'.
		self assert: (fields at: 'expirationDate') equals: (Month month: 07 year: 2020).
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: 0) 
	].

	checkoutResponse _ defaultWebClient 
		checkOutCartIdentifiedAs: 23 
		withCreditCardNumbered: '0000111122223333' 
		ownedBy: 'Teo' 
		expiringOn: (Month month: 07 year: 2020) .
	
	self assert: checkoutResponse equals: 0.
! !
!TusLibrosWebClient methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:03:22' prior: 50792787!
checkOutCartIdentifiedAs: aCartId 
withCreditCardNumbered: aCreditCartNumber 
ownedBy: anOwner 
expiringOn: anExpirationMonthOfYear
	| queryParams response |

	queryParams _ Dictionary new 
			at: 'cartId' put: aCartId printString ; 
			at: 'creditCardNumber' put: aCreditCartNumber ;
			at:  'ownersName' put: anOwner ; 
			at: 'expirationDate' put: (anExpirationMonthOfYear copyReplaceAll: ' ' with: '%20') ;
			yourself .
	response _ webClient 
		htmlSubmit: (self url, TusLibrosServerController checkoutCartEndpoint ) fields: queryParams. 
	
	response isSuccess
		ifTrue: [
				^WebUtils jsonDecode: response content readStream .
			]
		ifFalse: [
				self error: response content .
			].! !
!TusLibrosWebClient methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:03:40' prior: 50792977!
checkOutCartIdentifiedAs: aCartId 
withCreditCardNumbered: aCreditCartNumber 
ownedBy: anOwner 
expiringOn: anExpirationMonthOfYear
	| queryParams response |

	queryParams _ Dictionary new 
			at: 'cartId' put: aCartId printString ; 
			at: 'creditCardNumber' put: aCreditCartNumber ;
			at:  'ownersName' put: anOwner ; 
			at: 'expirationDate' put: (anExpirationMonthOfYear printString copyReplaceAll: ' ' with: '%20') ;
			yourself .
	response _ webClient 
		htmlSubmit: (self url, TusLibrosServerController checkoutCartEndpoint ) fields: queryParams. 
	
	response isSuccess
		ifTrue: [
				^WebUtils jsonDecode: response content readStream .
			]
		ifFalse: [
				self error: response content .
			].! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:04:31' prior: 50792950!
test12PuedoHacerCheckoutDeUnCarrito
	| checkoutResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/checkoutcart'.
		self assert: (fields at: 'cartId') equals: 23 printString .
		self assert: (fields at: 'creditCardNumber') equals: '0000111122223333'.
		self assert: (fields at: 'ownersName') equals: 'Teo'.
		self assert: (fields at: 'expirationDate') 
			equals: ((Month month: 07 year: 2020) printString copyReplaceAll: ' ' with: '%20') .
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: 0) 
	].

	checkoutResponse _ defaultWebClient 
		checkOutCartIdentifiedAs: 23 
		withCreditCardNumbered: '0000111122223333' 
		ownedBy: 'Teo' 
		expiringOn: (Month month: 07 year: 2020) .
	
	self assert: checkoutResponse equals: 0.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:04:41' prior: 50793028!
test12PuedoHacerCheckoutDeUnCarrito
	| checkoutResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/checkoutcart'.
		self assert: (fields at: 'cartId') equals: 23 printString .
		self assert: (fields at: 'creditCardNumber') equals: '0000111122223333'.
		self assert: (fields at: 'ownersName') equals: 'Teo'.
		self assert: (fields at: 'expirationDate') 
			equals: ((Month month: 07 year: 2020) printString copyReplaceAll: ' ' with: '%20') .
			
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: 0) 
	].

	checkoutResponse _ defaultWebClient 
		checkOutCartIdentifiedAs: 23 
		withCreditCardNumbered: '0000111122223333' 
		ownedBy: 'Teo' 
		expiringOn: (Month month: 07 year: 2020) .
	
	self assert: checkoutResponse equals: 0.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:05:45' prior: 50792875!
test11SiElServerDaUnErrorAlAgregarCosasAUnCarritoLevantoUnaExcepcion
	||
		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error!!'.
	].

	self should: [defaultWebClient add: 3 of: 'validBook' toCartIdentifiedAs: 23] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Error!!'.

	

! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:05:51' prior: 50793086!
test11SiElServerDaUnErrorAlAgregarCosasAUnCarritoLevantoUnaExcepcion

		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error!!'.
	].

	self should: [defaultWebClient add: 3 of: 'validBook' toCartIdentifiedAs: 23] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Error!!'.

	

! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:06:15' prior: 50792816!
test10PuedoAgregarCosasAUnCarrito
	| addToCartResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/addtocart'.
		self assert: (fields at: 'cartId') equals: 23 printString .
		self assert: (fields at: 'bookISBN') equals: 'validBook'.
		self assert: (fields at: 'bookQuantity') equals: 3 printString .
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: 0) 
	].

	addToCartResponse _ defaultWebClient add: 3 of: 'validBook' toCartIdentifiedAs: 23 .
	
	self assert: addToCartResponse equals: 0.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:06:31' prior: 50792770!
test09
		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error!!!!' 
	].

	self should: [defaultWebClient catalog ]
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Error!!!!'.
! !
!TusLibrosWebClientTest methodsFor: 'test - createcart' stamp: 'tf 7/9/2019 23:06:53' prior: 50790349!
test07SiElRequestAlServidorDeCrearUnCarritoDaErrorElWebClientLevantaUnaExcepcion
		
	onHtmlSubmitBlock _ [:url :fields | 
		^(WebResponse protocol: 'http' code: 404) content: 'Error!!'; yourself. 
	].

	self should: [defaultWebClient createCartFor: testObjectFactory validUser authenticatedWith: testObjectFactory validUserPassword ]
		 raise:  Error - MessageNotUnderstood 
		withMessageText: 'Error!!'.
	
! !
!TusLibrosWebClient methodsFor: 'server requests' stamp: 'tf 7/9/2019 23:07:36' prior: 50792856!
add: anAmount of: aBook toCartIdentifiedAs: aCartId
	| queryParams response |

	queryParams _ Dictionary new 
			at: 'bookQuantity' put: anAmount printString ; 
			at: 'bookISBN' put: aBook; 
			at: 'cartId' put: aCartId printString ; 
			yourself .
	response _ webClient htmlSubmit: (self url, TusLibrosServerController addToCartEndpoint ) fields: queryParams. 
	
	response isSuccess
		ifTrue: [
				^WebUtils jsonDecode: response content readStream .
			]
		ifFalse: [
				self error: response content .
			].! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:08:13'!
test13LevantaUnaExcepcionAlRecibirUnErrorDelServer
	| checkoutResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/checkoutcart'.
		self assert: (fields at: 'cartId') equals: 23 printString .
		self assert: (fields at: 'creditCardNumber') equals: '0000111122223333'.
		self assert: (fields at: 'ownersName') equals: 'Teo'.
		self assert: (fields at: 'expirationDate') 
			equals: ((Month month: 07 year: 2020) printString copyReplaceAll: ' ' with: '%20') .
			
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: 0) 
	].

	checkoutResponse _ defaultWebClient 
		checkOutCartIdentifiedAs: 23 
		withCreditCardNumbered: '0000111122223333' 
		ownedBy: 'Teo' 
		expiringOn: (Month month: 07 year: 2020) .
	
	self assert: checkoutResponse equals: 0.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:08:32' prior: 50793182!
test13LevantaUnaExcepcionAlRecibirUnErrorDelServer
	| checkoutResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error'. 
	].

	checkoutResponse _ defaultWebClient 
		checkOutCartIdentifiedAs: 23 
		withCreditCardNumbered: '0000111122223333' 
		ownedBy: 'Teo' 
		expiringOn: (Month month: 07 year: 2020) .
	
	self assert: checkoutResponse equals: 0.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:09:24' prior: 50793211!
test13LevantaUnaExcepcionAlRecibirUnErrorDelServer
	||
		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error'. 
	].

	self should: [
			defaultWebClient 
				checkOutCartIdentifiedAs: 23 
				withCreditCardNumbered: '0000111122223333' 
				ownedBy: 'Teo' 
				expiringOn: (Month month: 07 year: 2020) .]
		 raise: Error -  MessageNotUnderstood 
		 withMessageText: 'Error'.
	! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:09:29' prior: 50793227!
test13LevantaUnaExcepcionAlRecibirUnErrorDelServer
		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error'. 
	].

	self should: [
			defaultWebClient 
				checkOutCartIdentifiedAs: 23 
				withCreditCardNumbered: '0000111122223333' 
				ownedBy: 'Teo' 
				expiringOn: (Month month: 07 year: 2020) .]
		 raise: Error -  MessageNotUnderstood 
		 withMessageText: 'Error'.
	! !

----SNAPSHOT----(9 July 2019 23:09:43) TusLibros-Web.image priorSource: 14752781!
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:11:38'!
test14PuedoListarLasComprasDeUnUsuario
	| checkoutResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/checkoutcart'.
		self assert: (fields at: 'username') equals: 'Teo' .
		self assert: (fields at: 'password') equals: 'freund'.



			
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: '123') 
	].

	checkoutResponse _ defaultWebClient listPurchasesOf: 'Teo' authenticatingWith: 'freund'. 
	
	self assert: checkoutResponse equals: '123'.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:11:45' prior: 50793263!
test14PuedoListarLasComprasDeUnUsuario
	| listPurchaseResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/checkoutcart'.
		self assert: (fields at: 'username') equals: 'Teo' .
		self assert: (fields at: 'password') equals: 'freund'.



			
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: '123') 
	].

	listPurchaseResponse _ defaultWebClient listPurchasesOf: 'Teo' authenticatingWith: 'freund'. 
	
	self assert: listPurchaseResponse equals: '123'.
! !
!TusLibrosWebClient methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:12:31' prior: 50792794!
listPurchasesOf: aUser authenticatingWith: aPassword
	| queryParams response |

	queryParams _ Dictionary new 
			at: 'usernam' put: aUser ; 
			at: 'password' put: aPassword ;
			yourself .
			
	response _ webClient 
		htmlSubmit: (self url, TusLibrosServerController listPurchasesEndpoint ) fields: queryParams. 
	
	response isSuccess
		ifTrue: [
				^WebUtils jsonDecode: response content readStream .
			]
		ifFalse: [
				self error: response content .
			].! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:12:56' prior: 50793283!
test14PuedoListarLasComprasDeUnUsuario
	| listPurchaseResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		self assert: url equals: 'http://tusLibros.com:8484/listpurchases'.
		self assert: (fields at: 'username') equals: 'Teo' .
		self assert: (fields at: 'password') equals: 'freund'.



			
		(WebResponse protocol: 'http' code: 200) content: (WebUtils jsonEncode: '123') 
	].

	listPurchaseResponse _ defaultWebClient listPurchasesOf: 'Teo' authenticatingWith: 'freund'. 
	
	self assert: listPurchaseResponse equals: '123'.
! !
!TusLibrosWebClient methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:13:09' prior: 50793303!
listPurchasesOf: aUser authenticatingWith: aPassword
	| queryParams response |

	queryParams _ Dictionary new 
			at: 'username' put: aUser ; 
			at: 'password' put: aPassword ;
			yourself .
			
	response _ webClient 
		htmlSubmit: (self url, TusLibrosServerController listPurchasesEndpoint ) fields: queryParams. 
	
	response isSuccess
		ifTrue: [
				^WebUtils jsonDecode: response content readStream .
			]
		ifFalse: [
				self error: response content .
			].! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:14:44'!
test15PuedoListarLasComprasDeUnUsuario
	| listPurchaseResponse|
		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error' 
	].

	listPurchaseResponse _ defaultWebClient listPurchasesOf: 'Teo' authenticatingWith: 'freund'. 
	
	self assert: listPurchaseResponse equals: '123'.
! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:15:14' prior: 50793359!
test15PuedoListarLasComprasDeUnUsuario
	||
		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error' 
	].

	self should: [defaultWebClient listPurchasesOf: 'Teo' authenticatingWith: 'freund'] 
		raise: Error - MessageNotUnderstood  
		withMessageText: 'Error'. 
	! !
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/9/2019 23:15:19' prior: 50793373!
test15PuedoListarLasComprasDeUnUsuario
		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error' 
	].

	self should: [defaultWebClient listPurchasesOf: 'Teo' authenticatingWith: 'freund'] 
		raise: Error - MessageNotUnderstood  
		withMessageText: 'Error'. 
	! !

----SNAPSHOT----(9 July 2019 23:15:56) TusLibros-Web.image priorSource: 14771492!

----QUIT----(9 July 2019 23:16:05) TusLibros-Web.image priorSource: 14775921!

----STARTUP---- (10 July 2019 11:45:50) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


TusLibrosServerController allInstances do: [:in | in stopListening ; destroy].!

----SNAPSHOT----(10 July 2019 11:47:43) TusLibros-Web.image priorSource: 14776004!
!TusLibrosServerControllerTest methodsFor: 'setUp/tearDown' stamp: 'tf 7/10/2019 11:47:57' prior: 50789814!
tearDown
	self halt.
	aDefaultServerController stopListening .
	aDefaultServerController destroy .! !
!TusLibrosServerControllerTest methodsFor: 'setUp/tearDown' stamp: 'tf 7/10/2019 11:48:15' prior: 50793414!
tearDown

	aDefaultServerController stopListening .
	aDefaultServerController destroy .! !
!TusLibrosServerControllerTest methodsFor: 'test - port' stamp: 'tf 7/10/2019 11:51:51' prior: 50792698!
test02PuedoCrearUnaInstanciaDelServidorQueEscucheEnUnPuertoEspecifico
	| aServerController |
	
	aServerController _ TusLibrosServerController listeningOn: 8888 withFacade: aSystemFacade.
	self assert: (aServerController port = 8888).
	self halt.
	
	aServerController stopListening ; destroy .! !
!TusLibrosServerControllerTest methodsFor: 'test - port' stamp: 'tf 7/10/2019 11:52:43' prior: 50793428!
test02PuedoCrearUnaInstanciaDelServidorQueEscucheEnUnPuertoEspecifico
	| aServerController |
	
	aServerController _ TusLibrosServerController listeningOn: 8888 withFacade: aSystemFacade.
	self assert: (aServerController port = 8888).

	
	aServerController stopListening ; destroy .! !

----STARTUP---- (10 July 2019 11:54:58) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


TusLibrosServerController allInstances do: [:in | in stopListening ; destroy].!

[self halt] ensure: [^2].!

[self halt] ensure: [^2].!

[self halt] ensure: [^2]. !

[self halt] ensure: [^2].!
!TusLibrosServerControllerTest methodsFor: 'test - port' stamp: 'tf 7/10/2019 12:07:01' prior: 50789758!
test03ElServerNoPuedeEscucharEnUnPuertoNegativo
	self halt.
	self should: [TusLibrosServerController listeningOn: -1 withFacade: aSystemFacade ]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [:anError |
			self assert: anError messageText equals: TusLibrosServerController invalidPortNumberMessageError	
		].! !
!TusLibrosServerControllerTest methodsFor: 'test - port' stamp: 'tf 7/10/2019 12:07:19' prior: 50793464!
test03ElServerNoPuedeEscucharEnUnPuertoNegativo

	self should: [TusLibrosServerController listeningOn: -1 withFacade: aSystemFacade ]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [:anError |
			self assert: anError messageText equals: TusLibrosServerController invalidPortNumberMessageError	
		].! !

----SNAPSHOT----(10 July 2019 12:08:05) TusLibros-Web.image priorSource: 14776302!

----STARTUP---- (10 July 2019 12:08:23) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


TusLibrosServerController allInstances do: [:in | in stopListening ; destroy].!

----SNAPSHOT----(10 July 2019 12:08:41) TusLibros-Web.image priorSource: 14776302!

----SNAPSHOT----(10 July 2019 12:08:52) TusLibros-Web.image priorSource: 14779177!
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:09:51' prior: 50789872!
test10ReciboUnaRespuesta200AlAgregarItemsAlCarrito
	| cartId queryParams cartCreationResponse addToCartResponse|
	
	queryParams _ Dictionary newFromPairs: {'username' . testObjectsFactory validUser . 'password' . testObjectsFactory validUserPassword }.
	
	cartCreationResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	cartId _ WebUtils jsonDecode: cartCreationResponse content readStream.
	
	queryParams _ Dictionary newFromPairs: { 'cartId' . cartId printString . 'bookISBN' . 'validBook' . 'bookQuantity' . '3' }.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.

	self assert: addToCartResponse isSuccess .
	self assert: addToCartResponse code = 200.! !
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:10:52' prior: 50793506!
test10ReciboUnaRespuesta200AlAgregarItemsAlCarrito
	| cartId queryParams cartCreationResponse addToCartResponse|
	
	queryParams _ Dictionary newFromPairs: {
			'username' . testObjectsFactory validUser . 
			'password' . testObjectsFactory validUserPassword 
	}.
	
	cartCreationResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	cartId _ WebUtils jsonDecode: cartCreationResponse content readStream.
	
	queryParams _ Dictionary newFromPairs: { 
			'cartId' . cartId printString . 
			'bookISBN' . 'validBook' . 
			'bookQuantity' . '3' 
	}.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.

	self assert: addToCartResponse isSuccess .
	self assert: addToCartResponse code = 200.! !
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:11:05' prior: 50789066!
test11ReciboUnaRespuesta404AlAgregarItemsAUnCarritoInexistente
	| aServerController queryParams addToCartResponse cartCreationResponse cartId |
	
	aServerController _ TusLibrosServerController listeningOn: 8484 withFacade: aSystemFacade.
	
	queryParams _ Dictionary newFromPairs: {'username' . testObjectsFactory validUser . 'password' . testObjectsFactory validUserPassword }.
	
	cartCreationResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	cartId _ WebUtils jsonDecode: cartCreationResponse content readStream.
	
	queryParams _ Dictionary newFromPairs: { 'cartId' . cartId printString . 'bookISBN' . 'invalidBook' . 'bookQuantity' . '3' }.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.
	
	self deny: addToCartResponse isSuccess .
	self assert: addToCartResponse code = 404.
	self assert: addToCartResponse content = 'Item is not in catalog'.! !
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:11:38' prior: 50793561!
test11ReciboUnaRespuesta404AlAgregarItemsAUnCarritoInexistente
	| queryParams addToCartResponse cartCreationResponse cartId |
	
	queryParams _ Dictionary newFromPairs: {'username' . testObjectsFactory validUser . 'password' . testObjectsFactory validUserPassword }.
	
	cartCreationResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	cartId _ WebUtils jsonDecode: cartCreationResponse content readStream.
	
	queryParams _ Dictionary newFromPairs: { 'cartId' . cartId printString . 'bookISBN' . 'invalidBook' . 'bookQuantity' . '3' }.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.
	
	self deny: addToCartResponse isSuccess .
	self assert: addToCartResponse code = 404.
	self assert: addToCartResponse content = 'Item is not in catalog'.! !
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:13:04' prior: 50793594!
test11ReciboUnaRespuesta404AlAgregarItemsAUnCarritoInexistente
	| queryParams addToCartResponse |
		
	queryParams _ Dictionary newFromPairs: { 
		'cartId' . -2 printString . 
		'bookISBN' . 'invalidBook' . 
		'bookQuantity' . '3' 
	}.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.
	
	self deny: addToCartResponse isSuccess .
	self assert: addToCartResponse code = 404.
	self assert: addToCartResponse content = 'Item is not in catalog'.! !
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:13:35' prior: 50793624!
test11ReciboUnaRespuesta404AlAgregarItemsAUnCarritoInexistente
	| queryParams addToCartResponse |
		
	queryParams _ Dictionary newFromPairs: { 
		'cartId' . -2 printString . 
		'bookISBN' . 'invalidBook' . 
		'bookQuantity' . '3' 
	}.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.
	
	self deny: addToCartResponse isSuccess .
	self assert: addToCartResponse code = 404.
	self assert: addToCartResponse content equals: 'Item is not in catalog'.! !
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:13:45' prior: 50793643!
test11ReciboUnaRespuesta404AlAgregarItemsAUnCarritoInexistente
	| queryParams addToCartResponse |
		
	queryParams _ Dictionary newFromPairs: { 
		'cartId' . -2 printString . 
		'bookISBN' . 'invalidBook' . 
		'bookQuantity' . '3' 
	}.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.
	
	self deny: addToCartResponse isSuccess .
	self assert: addToCartResponse code = 404.
	self assert: addToCartResponse content equals: 'Invalid cart id'.! !

TusLibrosServerControllerTest removeSelector: #test11ReciboUnaRespuesta404AlAgregarItemsAUnCarritoInexistente!
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:14:28' prior: 50789898!
test11ReciboUnaRespuesta404AlAgregarItemsDeUnLibroInexistente
	| queryParams addToCartResponse cartCreationResponse cartId |
	
	queryParams _ Dictionary newFromPairs: {
		'username' . testObjectsFactory validUser . 
		'password' . testObjectsFactory validUserPassword 
	}.
	
	cartCreationResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	cartId _ WebUtils jsonDecode: cartCreationResponse content readStream.
	
	queryParams _ Dictionary newFromPairs: { 
		'cartId' . cartId printString . 
		'bookISBN' . 'invalidBook' . 
		'bookQuantity' . '3' 
	}.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.
	
	self deny: addToCartResponse isSuccess .
	self assert: addToCartResponse code = 404.
	self assert: addToCartResponse content = 'Item is not in catalog'.! !

TusLibrosServerController allInstances do: [:in | in stopListening ; destroy].!
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:14:47' prior: 50789926!
test12ReciboUnaRespuesta404AlAgregarItemsAUnCarritoInexistente
	| queryParams addToCartResponse|
	
	queryParams _ Dictionary newFromPairs: { 
		'cartId' . '-1835140' . 
		'bookISBN' . 'validBook' . 
		'bookQuantity' . '3' 
	}.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.
	
	self assert: addToCartResponse code = 404.
	self assert: addToCartResponse content = 'Invalid cart id'.! !
!TusLibrosServerControllerTest methodsFor: 'test - catalogo' stamp: 'tf 7/10/2019 12:15:05' prior: 50789952!
test19AlPedirElCatalogoMeLoDevuelveConCodigo200
	| catalogResponse aCatalog |

		
	catalogResponse _ WebClient htmlSubmit: 'http://localhost:8484/catalog'  fields: Dictionary new.
		
	
	self assert: catalogResponse code equals: 200.
	
	aCatalog _ WebUtils jsonDecode: catalogResponse content readStream .
	self assert: aCatalog notEmpty .
	self assert: aCatalog equals: aSystemFacade catalog . 
	
		! !
!TusLibrosServerControllerTest methodsFor: 'test - checkout' stamp: 'tf 7/10/2019 12:15:24' prior: 50789977!
test14AlHacerCheckoutDeUnCarritoConElementosObtengoUnaRespuestaConCodigo200
	| cartCreationResponse cartId queryParams checkOutResponse expirationDate |
	
	queryParams _ Dictionary newFromPairs: 
		{'username' . testObjectsFactory validUser . 
		  'password' . testObjectsFactory validUserPassword }.
	
	cartCreationResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	cartId _ WebUtils jsonDecode: cartCreationResponse content readStream.
	
	queryParams _ Dictionary newFromPairs: { 
		'cartId' . cartId printString . 
		'bookISBN' . 'validBook' . 
		'bookQuantity' . '3' 
	}.
	WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.

	expirationDate _ testObjectsFactory storeTestObjectsFactory notExpiredMonthOfYear printString copyReplaceAll: ' ' with: '%20'.
	queryParams _ Dictionary newFromPairs: 
		{'cartId' . cartId printString . 
		'creditCardNumber' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardNumber . 
		'ownersName' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardOwner . 
		'expirationDate' . expirationDate }.
		
	checkOutResponse _ WebClient htmlSubmit: 'http://localhost:8484/checkoutcart' fields: queryParams .
		
	self assert: checkOutResponse code equals: 200.
	
		! !

----SNAPSHOT----(10 July 2019 12:16:14) TusLibros-Web.image priorSource: 14779261!

----SNAPSHOT----(10 July 2019 12:17:22) TusLibros-Web.image priorSource: 14788646!
!TusLibrosWebClientTest methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 12:18:26'!
test09SiAlPedirElCatalogoElServidorDevuelveUnErrorElWebClientLevantaUnaEXcepcion
		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error!!!!' 
	].

	self should: [defaultWebClient catalog ]
		raise: Error - MessageNotUnderstood 
		withMessageText: 'Error!!!!'.
! !

TusLibrosWebClientTest removeSelector: #test09!
!TusLibrosWebClientTest methodsFor: 'test - checkout' stamp: 'tf 7/10/2019 12:20:31'!
test13LevantaUnaExcepcionAlRecibirUnErrorDelServerSiSeLePideHacerCheckout
		
	onHtmlSubmitBlock _ [:url :fields | 
		(WebResponse protocol: 'http' code: 404) content: 'Error'. 
	].

	self should: [
			defaultWebClient 
				checkOutCartIdentifiedAs: 23 
				withCreditCardNumbered: '0000111122223333' 
				ownedBy: 'Teo' 
				expiringOn: (Month month: 07 year: 2020) .]
		 raise: Error -  MessageNotUnderstood 
		 withMessageText: 'Error'.
	! !

TusLibrosWebClientTest removeSelector: #test13LevantaUnaExcepcionAlRecibirUnErrorDelServer!

----SNAPSHOT----(10 July 2019 12:20:46) TusLibros-Web.image priorSource: 14788730!
!CreateCartWindowModel methodsFor: 'accessing' stamp: 'tf 7/10/2019 12:24:36' prior: 50790398!
password
	^'***'.! !

testObjectsFactory _ TusLibrosWebTestObjectFactory new.!

aSystemFacade _ testObjectsFactory tusLibrosSystemFacade. !

aSystemFacade _ testObjectsFactory tusLibrosSystemFacade. !

aDefaultServerController _ TusLibrosServerController listeningOn: 8080 withFacade: aSystemFacade.!

CreateCartWindow open.!
!CreateCartWindowModel methodsFor: 'accessing' stamp: 'TF 7/9/2019 16:47:19' prior: 50793839!
password
	^password.! !

CreateCartWindow open.!

----SNAPSHOT----(10 July 2019 12:44:49) TusLibros-Web.image priorSource: 14789912!
!TusLibrosServerControllerTest methodsFor: 'test - port' stamp: 'tf 7/10/2019 12:45:44' prior: 50792698!
test02PuedoCrearUnaInstanciaDelServidorQueEscucheEnUnPuertoEspecifico
	| aServerController |
	
	aServerController _ TusLibrosServerController listeningOn: 8888 withFacade: aSystemFacade.
	
	self assert: aServerController port equals: 8888.
	
	aServerController stopListening ; destroy .! !
!TusLibrosServerControllerTest methodsFor: 'test - create cart' stamp: 'tf 7/10/2019 12:46:51' prior: 50789831!
test07IntentarCrearUnCarritoConUnUsuarioMalAutenticadoGeneraUnaRespuestaDeError404
	| httpResponse queryParams |
	
	queryParams _ Dictionary newFromPairs:  { 
		'user' . 'badUser' . 
		'password' . ''
	}.
	httpResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	
	self deny: httpResponse isSuccess.
	self assert: httpResponse code = 404.! !
!TusLibrosServerControllerTest methodsFor: 'test - create cart' stamp: 'tf 7/10/2019 12:47:25' prior: 50789847!
test08AlCrearUnCarritoConUnUsuarioValidoTengoUnaRespuesta200
	| httpResponse queryParams |
	
	queryParams _ Dictionary newFromPairs:  { 
		'username' . 'Prueba' . 
		'password' . 'Prueba'
	}.
	httpResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	
	self assert: httpResponse isSuccess.
	self assert: httpResponse code = 200.! !
!TusLibrosServerControllerTest methodsFor: 'test - create cart' stamp: 'tf 7/10/2019 12:47:38' prior: 50793874!
test07IntentarCrearUnCarritoConUnUsuarioMalAutenticadoGeneraUnaRespuestaDeError404
	| httpResponse queryParams |
	
	queryParams _ Dictionary newFromPairs:  { 
		'user' . 'badUser' . 
		'password' . ''
	}.
	httpResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	
	self deny: httpResponse isSuccess.
	self assert: httpResponse code = 404.
	self assert: httpResponse content equals: nil.! !
!TusLibrosServerControllerTest methodsFor: 'test - create cart' stamp: 'tf 7/10/2019 12:47:59' prior: 50793905!
test07IntentarCrearUnCarritoConUnUsuarioMalAutenticadoGeneraUnaRespuestaDeError404
	| httpResponse queryParams |
	
	queryParams _ Dictionary newFromPairs:  { 
		'user' . 'badUser' . 
		'password' . ''
	}.
	httpResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	
	self deny: httpResponse isSuccess.
	self assert: httpResponse code = 404.
	self assert: httpResponse content equals: 'key not found'.! !
!TusLibrosServerControllerTest methodsFor: 'test - checkout' stamp: 'tf 7/10/2019 12:50:20'!
createCart
	| cartCreationResponse cartId queryParams |
	queryParams _ Dictionary newFromPairs: 
		{'username' . testObjectsFactory validUser . 
		  'password' . testObjectsFactory validUserPassword }.
	
	cartCreationResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	cartId _ WebUtils jsonDecode: cartCreationResponse content readStream.! !
!TusLibrosServerControllerTest methodsFor: 'test - checkout' stamp: 'tf 7/10/2019 12:50:40' prior: 50793939!
createCart
	| cartCreationResponse cartId queryParams |
	
	queryParams _ Dictionary newFromPairs: 
		{'username' . testObjectsFactory validUser . 
		  'password' . testObjectsFactory validUserPassword }.
	
	cartCreationResponse _ WebClient htmlSubmit: 'http://localhost:8484/createCart' fields: queryParams.
	cartId _ WebUtils jsonDecode: cartCreationResponse content readStream.
	
	^cartId .! !
!TusLibrosServerControllerTest methodsFor: 'test - checkout' stamp: 'tf 7/10/2019 12:51:58' prior: 50793753!
test14AlHacerCheckoutDeUnCarritoConElementosObtengoUnaRespuestaConCodigo200
	| cartId queryParams checkOutResponse expirationDate |
	
	cartId _ self createCart .
	
	queryParams _ Dictionary newFromPairs: { 
		'cartId' . cartId printString . 
		'bookISBN' . 'validBook' . 
		'bookQuantity' . '3' 
	}.
	WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.

	expirationDate _ testObjectsFactory storeTestObjectsFactory notExpiredMonthOfYear printString copyReplaceAll: ' ' with: '%20'.
	queryParams _ Dictionary newFromPairs: 
		{'cartId' . cartId printString . 
		'creditCardNumber' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardNumber . 
		'ownersName' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardOwner . 
		'expirationDate' . expirationDate }.
		
	checkOutResponse _ WebClient htmlSubmit: 'http://localhost:8484/checkoutcart' fields: queryParams .
		
	self assert: checkOutResponse code equals: 200.
	
		! !
!TusLibrosServerControllerTest methodsFor: 'test - checkout' stamp: 'tf 7/10/2019 12:52:09' prior: 50790020!
test15AlHacerCheckoutDeUnCarritoInexistenteObtengoUnaRespuestaConCodigo404YMensajeDeError
	| cartId queryParams checkOutResponse expirationDate |
	
	cartId _ -10.
	
	expirationDate _ testObjectsFactory storeTestObjectsFactory notExpiredMonthOfYear printString copyReplaceAll: ' ' with: '%20'.
	queryParams _ Dictionary newFromPairs: 
		{'cartId' . cartId printString . 
		'creditCardNumber' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardNumber . 
		'ownersName' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardOwner . 
		'expirationDate' . expirationDate }.
		
	checkOutResponse _ WebClient htmlSubmit: 'http://localhost:8484/checkoutcart' fields: queryParams .
		
	self assert: checkOutResponse code equals: 404.
	self assert: checkOutResponse content equals: 'Invalid cart id'
	
		! !
!TusLibrosServerControllerTest methodsFor: 'test - checkout' stamp: 'tf 7/10/2019 12:52:35' prior: 50790049!
test16AlHacerCheckoutDeUnCarritoVacioObtengoUnaRespuestaConCodigo404YUnMensajeDeError
	| cartId queryParams checkOutResponse expirationDate |
	
	cartId _ self createCart .
	
	expirationDate _ testObjectsFactory storeTestObjectsFactory notExpiredMonthOfYear printString copyReplaceAll: ' ' with: '%20'.
	queryParams _ Dictionary newFromPairs: 
		{'cartId' . cartId printString . 
		'creditCardNumber' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardNumber . 
		'ownersName' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardOwner . 
		'expirationDate' . expirationDate }.
		
	checkOutResponse _ WebClient htmlSubmit: 'http://localhost:8484/checkoutcart' fields: queryParams .
		
	self assert: checkOutResponse code equals: 404.
	self assert: checkOutResponse content equals: 'Can not check out an empty cart'.
	
		! !
!TusLibrosServerControllerTest methodsFor: 'test - checkout' stamp: 'tf 7/10/2019 12:52:50' prior: 50790089!
test17AlHacerCheckoutDeUnCarritoConElementosConUnaTarjetaInvalidaObtengoUnaRespuestaConCodigo404YUnMensajeDeError
	| cartId queryParams checkOutResponse expirationDate |
	
	cartId _ self createCart .
	
	queryParams _ Dictionary newFromPairs: { 'cartId' . cartId printString . 'bookISBN' . 'validBook' . 'bookQuantity' . '3' }.
	WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.

	expirationDate _ testObjectsFactory storeTestObjectsFactory expiredMonthOfYear printString copyReplaceAll: ' ' with: '%20'.
	queryParams _ Dictionary newFromPairs: 
		{'cartId' . cartId printString . 
		'creditCardNumber' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardNumber . 
		'ownersName' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardOwner . 
		'expirationDate' . expirationDate }.
		
	checkOutResponse _ WebClient htmlSubmit: 'http://localhost:8484/checkoutcart' fields: queryParams .
		
	self assert: checkOutResponse code equals: 404.
	self assert: checkOutResponse content equals: 'Can not charge an expired credit card'.
	
		! !
!TusLibrosServerControllerTest methodsFor: 'test - list purchase' stamp: 'tf 7/10/2019 12:53:50' prior: 50790163!
test22AlPedirLasComprasDeUnUsuarioConComprasReciboCodigo200YDiccionarioAcorde
	| cartId queryParams expirationDate purchasesResponse |
	
	cartId _ self createCart .
	
	queryParams _ Dictionary newFromPairs: { 'cartId' . cartId printString . 'bookISBN' . 'validBook' . 'bookQuantity' . '3' }.
	WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.

	expirationDate _ testObjectsFactory storeTestObjectsFactory notExpiredMonthOfYear printString copyReplaceAll: ' ' with: '%20'.
	queryParams _ Dictionary newFromPairs: 
		{'cartId' . cartId printString . 
		'creditCardNumber' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardNumber . 
		'ownersName' . testObjectsFactory storeTestObjectsFactory notExpiredCreditCardOwner . 
		'expirationDate' . expirationDate }.
		
	WebClient htmlSubmit: 'http://localhost:8484/checkoutcart' fields: queryParams .
	
	queryParams _ Dictionary newFromPairs: 
		{'username' . testObjectsFactory validUser . 
		  'password' . testObjectsFactory validUserPassword }.
		
	purchasesResponse _ WebClient htmlSubmit: 'http://localhost:8484/listpurchases'  fields: queryParams.
		
	self assert: purchasesResponse code equals: 200.
	self assert: (WebUtils jsonDecode: (purchasesResponse content readStream )) 
		equals: (Dictionary new 
					at: 'validBook' 
					put: 3*(testObjectsFactory storeTestObjectsFactory itemSellByTheStorePrice); yourself ).
	
		! !
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:54:21' prior: 50793533!
test10ReciboUnaRespuesta200AlAgregarItemsAlCarrito
	| cartId queryParams addToCartResponse|
	
	cartId _ self createCart .
	
	queryParams _ Dictionary newFromPairs: { 
			'cartId' . cartId printString . 
			'bookISBN' . 'validBook' . 
			'bookQuantity' . '3' 
	}.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.

	self assert: addToCartResponse isSuccess .
	self assert: addToCartResponse code = 200.! !
!TusLibrosServerControllerTest methodsFor: 'test - add items' stamp: 'tf 7/10/2019 12:54:36' prior: 50793686!
test11ReciboUnaRespuesta404AlAgregarItemsDeUnLibroInexistente
	| queryParams addToCartResponse cartId |
	
	cartId _ self createCart .
	
	queryParams _ Dictionary newFromPairs: { 
		'cartId' . cartId printString . 
		'bookISBN' . 'invalidBook' . 
		'bookQuantity' . '3' 
	}.
	addToCartResponse  _ WebClient htmlSubmit: 'http://localhost:8484/addToCart' fields: queryParams.
	
	self deny: addToCartResponse isSuccess .
	self assert: addToCartResponse code = 404.
	self assert: addToCartResponse content = 'Item is not in catalog'.! !

----SNAPSHOT----(10 July 2019 12:56:59) TusLibros-Web.image priorSource: 14790608!

----SNAPSHOT----(10 July 2019 12:58:37) TusLibros-Web.image priorSource: 14801203!

----QUIT----(10 July 2019 13:00:35) TusLibros-Web.image priorSource: 14801287!

----STARTUP---- (10 July 2019 16:03:20) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


----SNAPSHOT----(10 July 2019 16:09:22) TusLibros-Web.image priorSource: 14801371!

Object subclass: #StoreWindowModel
	instanceVariableNames: 'username password webClient cartId catalog catalogIndex cartContents cartContentsIndex listableCatalog catalogAsDict'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

!classDefinition: #StoreWindowModel category: #'TusLibros-Web'!
Object subclass: #StoreWindowModel
	instanceVariableNames: 'username password webClient cartId catalog catalogIndex cartContents cartContentsIndex listableCatalog catalogAsDict'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

----SNAPSHOT----(10 July 2019 16:11:27) TusLibros-Web.image priorSource: 14801589!

TusLibrosServerController allInstances do: [:in | in stopListening ; destroy]. !

TusLibrosServerController allInstances do: [:in | in stopListening ; destroy]. !

TusLibrosServerController allInstances do: [:in | in stopListening ; destroy]. !

TusLibrosServerController allInstances do: [:in | in stopListening ; destroy]. !

TusLibrosServerController allInstances do: [:in | in stopListening ; destroy; inspect].   !

TusLibrosServerController allInstances do: [:in | in stopListening ; destroy].   !

aDefaultServerController stopListening ; destroy.!

TusLibrosServerController allInstances do: [:in | in stopListening ; destroy].   !

TusLibrosServerController allInstances .!

TusLibrosServerController allInstances inspect.!

----SNAPSHOT----(10 July 2019 16:15:23) TusLibros-Web.image priorSource: 14802243!

----QUIT----(10 July 2019 16:15:29) TusLibros-Web.image priorSource: 14803061!

----STARTUP---- (10 July 2019 16:15:31) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


TusLibrosServerController allInstances inspect.!

----QUIT----(10 July 2019 16:15:58) TusLibros-Web.image priorSource: 14803145!

----STARTUP---- (10 July 2019 16:16:07) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


----SNAPSHOT----(10 July 2019 16:21:22) TusLibros-Web.image priorSource: 14803413!

----QUIT----(10 July 2019 16:21:30) TusLibros-Web.image priorSource: 14803631!

----STARTUP---- (10 July 2019 16:21:32) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


TusLibrosServerController allInstances!

TusLibrosServerController allInstances .!

WebServer allInstances !

WebServer allInstances !

WebServer allInstances !

WebServer allInstances !

WebServer allInstances do: [:i | i stopListening ; destroy ].!

WebServer allInstances do: [:i | i stopListener ; destroy ].!

----SNAPSHOT----(10 July 2019 16:24:56) TusLibros-Web.image priorSource: 14803715!

----STARTUP---- (10 July 2019 16:25:09) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


WebServer allInstances!

----QUIT----(10 July 2019 16:26:23) TusLibros-Web.image priorSource: 14804248!

----STARTUP---- (10 July 2019 16:26:26) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


TusLibrosServerController allInstances .!

TestCase subclass: #StoreWindowModelTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

!classDefinition: #StoreWindowModelTest category: #'TusLibros-Web'!
TestCase subclass: #StoreWindowModelTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModelTest methodsFor: 'no messages' stamp: 'tf 7/10/2019 16:32:55'!
catalog
	! !
!StoreWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:33:42' prior: 50794311!
catalog
	^Dictionary new
		at: 'valid' put: 23;
		at: 'harry potter' put: 231;
		yourself ! !
!StoreWindowModel class methodsFor: 'nil' stamp: 'tf 7/10/2019 16:37:26'!
withWebClient: aWebClient cartId: aCartId username: aUsername andPassword: aPassword
	^self new initializewithWebClient: aWebClient cartId: aCartId username: aUsername andPassword: aPassword.! !

a := OrderedCollection new.!

a _ Dictionary new.!

a at: 'hola' put: 30. !

a!

a asOrderedCollection !

a at: 'hola'!

a keyAtValue: 0!

a keyAtValue: 'hola'!

a keyAtValue: 1!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 16:47:41'!
test01
	| storeModel |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	self assert: storeModel catalog equals: self catalog .! !

a inject: OrderedCollection new into: [:a :b | a] !

a!

a inject: OrderedCollection new into: [:a :b | a] .!

a inject: OrderedCollection new addingAll: [:a :b | a] .!

a inject: OrderedCollection new addingAll: [:a  | a] .!

a inject: OrderedCollection new addingAll: [:a | a] .!

a inject: OrderedCollection new into: [:c :a | c add: a] .!

a keys !

a keys asOrderedCollection !

a at: 'chau' put: 123.!

a keys asOrderedCollection !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 16:51:43' prior: 50794336!
test01
	| storeModel catalogAsList |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	catalogAsList _ self catalog keys asOrderedCollection .
	self assert: storeModel catalog equals:  catalogAsList .! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 16:51:53' prior: 50794359!
test01
	| storeModel catalogAsOrderedCollection |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	catalogAsOrderedCollection _ self catalog keys asOrderedCollection .
	self assert: storeModel catalog equals:  catalogAsOrderedCollection .! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 16:53:59' prior: 50794371!
test01
	| storeModel catalogAsOrderedCollection |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	catalogAsOrderedCollection _ OrderedCollection new.
	self catalog keysAndValuesDo: [:key :value | catalogAsOrderedCollection add: key, ' $', value printString].
	
	self assert: storeModel catalog equals:  catalogAsOrderedCollection .! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:54:10'!
initializewithWebClient: aStoreWindowModelTest cartId: aSmallInteger username: aString andPassword: aString4 
	self shouldBeImplemented.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:54:13' prior: 50794400!
initializewithWebClient: aStoreWindowModelTest cartId: aSmallInteger username: aString andPassword: aString4 
	! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:54:23'!
catalog
	self shouldBeImplemented.
	^catalog! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:54:25' prior: 50794415!
catalog
	
	^catalog! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:55:23' prior: 50794408!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	self initializeCatalogWith: aWebClient .
	! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:55:31'!
initializeCatalogWith: aStoreWindowModelTest 
	self shouldBeImplemented.! !

!classDefinition: #StoreWindowModel category: #'TusLibros-Web'!
Object subclass: #StoreWindowModel
	instanceVariableNames: 'username password webClient cartId catalog catalogIndex cartContents cartContentsIndex listableCatalog catalogAsDict catalogNames'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:56:37' prior: 50794432!
initializeCatalogWith: aWebClient 
	catalog _ OrderedCollection new.
	catalogNames _ OrderedCollection new.
	
	aWebClient catalog keysAndValuesDo: [:key :value | 
		catalog add: key, ' $', value printString.
		catalogNames add key.
	].! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:56:59' prior: 50794448!
initializeCatalogWith: aWebClient 
	catalog _ OrderedCollection new.
	catalogNames _ OrderedCollection new.
	
	aWebClient catalog keysAndValuesDo: [:key :value | 
		catalog add: key, ' $', value printString.
		catalogNames add: key.
	].! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 16:58:12'!
test02
	| storeModel |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	self assert: storeModel catalogIndex equals: 0.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:58:19'!
catalogIndex
	self shouldBeImplemented.
	^catalogIndex! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:58:26' prior: 50794479!
catalogIndex
	
	^catalogIndex! !

!classDefinition: #StoreWindowModel category: #'TusLibros-Web'!
Object subclass: #StoreWindowModel
	instanceVariableNames: 'username password webClient cartId catalog catalogIndex cartContents cartContentsIndex listableCatalog catalogAsDict catalogNames webclient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:59:37' prior: 50794424!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webclient _ aWebClient .
	self initializeCatalogWith: aWebClient .
	
	username _ aUsername .
	password _ aPassword .
	! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:59:50' prior: 50794499!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webClient _ aWebClient .
	self initializeCatalogWith: aWebClient .
	
	username _ aUsername .
	password _ aPassword .
	! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:59:53' prior: 50794510!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webClient _ aWebClient .
	self initializeCatalogWith .
	
	username _ aUsername .
	password _ aPassword .
	! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 16:59:56' prior: 50794521!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webClient _ aWebClient .
	self initializeCatalog .
	
	username _ aUsername .
	password _ aPassword .
	! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:00:07'!
initializeCatalog
	catalog _ OrderedCollection new.
	catalogNames _ OrderedCollection new.
	
	webClient catalog keysAndValuesDo: [:key :value | 
		catalog add: key, ' $', value printString.
		catalogNames add: key.
	].! !

StoreWindowModel removeSelector: #initializeCatalogWith:!

Object subclass: #StoreWindowModel
	instanceVariableNames: 'username password webClient cartId catalog catalogIndex cartContents cartContentsIndex listableCatalog catalogAsDict catalogNames'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

!classDefinition: #StoreWindowModel category: #'TusLibros-Web'!
Object subclass: #StoreWindowModel
	instanceVariableNames: 'username password webClient cartId catalog catalogIndex cartContents cartContentsIndex listableCatalog catalogAsDict catalogNames'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:00:26' prior: 50794531!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webClient _ aWebClient .
	username _ aUsername .
	password _ aPassword .
	
	self initializeCatalog .
	
	! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:00:55' prior: 50794470!
test02
	| storeModel |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	storeModel catalogIndex: 42.
	self assert: storeModel catalogIndex equals: 42.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:01:00'!
catalogIndex: aSmallInteger 
	self shouldBeImplemented.
	catalogIndex _ aSmallInteger! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:01:10' prior: 50794592!
catalogIndex: anIndex 
	
	catalogIndex _ anIndex! !

CreateCartWindowModelTest removeSelector: #test07SiElWebClientTraeElCatalogoDeLaTiendaYDisparaEventoIndicandoQueSeActualizo!

----SNAPSHOT----(10 July 2019 17:02:55) TusLibros-Web.image priorSource: 14804495!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:03:10'!
defaultCatalog
	^Dictionary new
		at: 'valid' put: 23;
		at: 'harry potter' put: 231;
		yourself ! !
!StoreWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:03:10' prior: 50794384!
test01
	| storeModel catalogAsOrderedCollection |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	catalogAsOrderedCollection _ OrderedCollection new.
	self defaultCatalog keysAndValuesDo: [:key :value | catalogAsOrderedCollection add: key, ' $', value printString].
	
	self assert: storeModel defaultCatalog equals:  catalogAsOrderedCollection .! !

StoreWindowModelTest removeSelector: #catalog!

!classDefinition: #StoreWindowModelTest category: #'TusLibros-Web'!
TestCase subclass: #StoreWindowModelTest
	instanceVariableNames: 'webClientRequestBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:04:34' prior: 50794616!
test01
	| storeModel catalogAsOrderedCollection |
	
	webClientRequestBlock _ [
		self defaultCatalog .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	catalogAsOrderedCollection _ OrderedCollection new.
	self defaultCatalog keysAndValuesDo: [:key :value | catalogAsOrderedCollection add: key, ' $', value printString].
	
	self assert: storeModel catalog equals:  catalogAsOrderedCollection .! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:04:53'!
test03
	| storeModel |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	storeModel catalogIndex: 42.
	self assert: storeModel catalogIndex equals: 42.! !

StoreWindowModelTest removeSelector: #test02!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:05:29'!
catalog
	^webClientRequestBlock value.! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:06:30'!
setUp
	webClientRequestBlock _ [
		self defaultCatalog.
	].! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:07:21' prior: 50794641!
test01
	| storeModel catalogAsOrderedCollection |
	
	webClientRequestBlock _ [
		self error: 'bad request' .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	
	self should: [storeModel catalog] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'bad request'. 
! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:07:26'!
test02
	| storeModel |
	
	webClientRequestBlock _ [
		self error: 'bad request' .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	
	self should: [storeModel catalog] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'bad request'. 
! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:04:34' prior: 50794681!
test01
	| storeModel catalogAsOrderedCollection |
	
	webClientRequestBlock _ [
		self defaultCatalog .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	catalogAsOrderedCollection _ OrderedCollection new.
	self defaultCatalog keysAndValuesDo: [:key :value | catalogAsOrderedCollection add: key, ' $', value printString].
	
	self assert: storeModel catalog equals:  catalogAsOrderedCollection .! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:10:12' prior: 50794541!
initializeCatalog
	catalog _ OrderedCollection new.
	catalogNames _ OrderedCollection new.
	[
		webClient catalog keysAndValuesDo: [:key :value | 
			catalog add: key, ' $', value printString.
			catalogNames add: key.
		].
	] on: Error 
		do: [:anError |  self triggerEvent: #catalogRequestFailed with: anError messageText ]! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:10:36' prior: 50794726!
initializeCatalog
	catalog _ OrderedCollection new.
	catalogNames _ OrderedCollection new.
	[
		webClient catalog keysAndValuesDo: [:key :value | 
			catalog add: key, ' $', value printString.
			catalogNames add: key.
		self triggerEvent: #catalogUpdated.
		].
	] on: Error 
		do: [:anError |  self triggerEvent: #catalogRequestFailed with: anError messageText ]! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:11:29' prior: 50794708!
test01
	| storeModel catalogAsOrderedCollection flag |
	
	webClientRequestBlock _ [
		self defaultCatalog .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	flag _ false.
	storeModel when: #catalogUpdated evaluate: [flag _ true].
	
	catalogAsOrderedCollection _ OrderedCollection new.
	self defaultCatalog keysAndValuesDo: [:key :value | catalogAsOrderedCollection add: key, ' $', value printString].
	
	self assert: storeModel catalog equals:  catalogAsOrderedCollection .! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:11:54' prior: 50794755!
test01
	| storeModel catalogAsOrderedCollection flag |
	
	webClientRequestBlock _ [
		self defaultCatalog .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	flag _ false.
	storeModel when: #catalogUpdated evaluate: [flag _ true].
	
	catalogAsOrderedCollection _ OrderedCollection new.
	self defaultCatalog keysAndValuesDo: [:key :value | catalogAsOrderedCollection add: key, ' $', value printString].
	
	self assert: storeModel catalog equals:  catalogAsOrderedCollection .
	self assert: flag.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:12:39' prior: 50794740!
initializeCatalog
	catalog _ OrderedCollection new.
	catalogNames _ OrderedCollection new.
	[
		webClient catalog keysAndValuesDo: [:key :value | 
			catalog add: key, ' $', value printString.
			catalogNames add: key.
		self triggerEvent: #catalogUpdated.
		].
	] on: Error 
		do: [:anError |  self triggerEvent: #catalogRequestFailed with: anError messageText ]! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:12:43' prior: 50794572!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webClient _ aWebClient .
	username _ aUsername .
	password _ aPassword .
	

	
	! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:13:24' prior: 50794420!
catalog
	
	^catalog ifNil: [self initializeCatalog. catalog] ifNotNil: [catalog]. ! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:14:55' prior: 50794695!
test02
	| storeModel error |
	
	webClientRequestBlock _ [
		self error: 'bad request' .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	storeModel when: #catalogRequestFailed evaluate: [:anError | error _ anError].
	
	storeModel catalog.
	
	self assert: error equals: 'bad request'.! !

StoreWindowModelTest removeSelector: #setUp!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:16:15'!
test01AlPedirElCatalogoPorPrimeraVezLoReciboYSeLevantaElEvento
	| storeModel catalogAsOrderedCollection flag |
	
	webClientRequestBlock _ [
		self defaultCatalog .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	flag _ false.
	storeModel when: #catalogUpdated evaluate: [flag _ true].
	
	catalogAsOrderedCollection _ OrderedCollection new.
	self defaultCatalog keysAndValuesDo: [:key :value | catalogAsOrderedCollection add: key, ' $', value printString].
	
	self assert: storeModel catalog equals:  catalogAsOrderedCollection .
	self assert: flag.! !

StoreWindowModelTest removeSelector: #test01!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:16:44'!
test02AlPedirElCatalogoYRecibirUnaExcepcionPorElWebClientSeLlamaAlEventoCorrespondiente
	| storeModel error |
	
	webClientRequestBlock _ [
		self error: 'bad request' .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	storeModel when: #catalogRequestFailed evaluate: [:anError | error _ anError].
	
	storeModel catalog.
	
	self assert: error equals: 'bad request'.! !

StoreWindowModelTest removeSelector: #test02!

!classDefinition: #StoreWindowModelTest category: #'TusLibros-Web'!
TestCase subclass: #StoreWindowModelTest
	instanceVariableNames: 'webClientRequestBlock catalogWebClientRequestBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:18:19' prior: 50794867!
test02AlPedirElCatalogoYRecibirUnaExcepcionPorElWebClientSeLlamaAlEventoCorrespondiente
	| storeModel error |
	
	catalogWebClientRequestBlock _ [
		self error: 'bad request' .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	storeModel when: #catalogRequestFailed evaluate: [:anError | error _ anError].
	
	storeModel catalog.
	
	self assert: error equals: 'bad request'.! !
!StoreWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:18:19' prior: 50794670!
catalog
	^catalogWebClientRequestBlock value.! !
!StoreWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:18:19' prior: 50794843!
test01AlPedirElCatalogoPorPrimeraVezLoReciboYSeLevantaElEvento
	| storeModel catalogAsOrderedCollection flag |
	
	catalogWebClientRequestBlock _ [
		self defaultCatalog .
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	flag _ false.
	storeModel when: #catalogUpdated evaluate: [flag _ true].
	
	catalogAsOrderedCollection _ OrderedCollection new.
	self defaultCatalog keysAndValuesDo: [:key :value | catalogAsOrderedCollection add: key, ' $', value printString].
	
	self assert: storeModel catalog equals:  catalogAsOrderedCollection .
	self assert: flag.! !

!classDefinition: #StoreWindowModelTest category: #'TusLibros-Web'!
TestCase subclass: #StoreWindowModelTest
	instanceVariableNames: 'catalogWebClientRequestBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:18:38'!
setUp
	catalogWebClientRequestBlock _ [
		self defaultCatalog .
	].! !

!classDefinition: #StoreWindowModelTest category: #'TusLibros-Web'!
TestCase subclass: #StoreWindowModelTest
	instanceVariableNames: 'catalogWebClientRequestBlock addToCartWebClientRequestBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:20:31'!
test04
	| storeModel catalogAsOrderedCollection flag |
	
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 3. 
		self assert: aBookISBN equals: 'valid'. 
		self assert: aCartId equals: 24. 

	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	flag _ false.
	storeModel when: #catalogUpdated evaluate: [flag _ true].
	
	catalogAsOrderedCollection _ OrderedCollection new.
	self defaultCatalog keysAndValuesDo: [:key :value | catalogAsOrderedCollection add: key, ' $', value printString].
	
	self assert: storeModel catalog equals:  catalogAsOrderedCollection .
	self assert: flag.! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:20:43' prior: 50794960!
test04
	| storeModel catalogAsOrderedCollection flag |
	
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 3. 
		self assert: aBookISBN equals: 'valid'. 
		self assert: aCartId equals: 24. 
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	
	flag _ false.
	storeModel when: #catalogUpdated evaluate: [flag _ true].
	
	catalogAsOrderedCollection _ OrderedCollection new.
	self defaultCatalog keysAndValuesDo: [:key :value | catalogAsOrderedCollection add: key, ' $', value printString].
	
	self assert: storeModel catalog equals:  catalogAsOrderedCollection .
	self assert: flag.! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:21:10'!
add: bookQuantity of: bookISBN toCartIdentifiedAs: cartId
	addToCartWebClientRequestBlock value: bookQuantity value: bookISBN  value: cartId .! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:22:39' prior: 50794985!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 3. 
		self assert: aBookISBN equals: 'valid'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ true].
	
	storeModel add: 3 of: 'valid'.
	
	self assert: counter.! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:22:46' prior: 50795018!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 3. 
		self assert: aBookISBN equals: 'valid'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	
	storeModel add: 3 of: 'valid'.
	
	self assert: counter.! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:22:51' prior: 50795037!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 3. 
		self assert: aBookISBN equals: 'valid'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	
	storeModel add: 3 of: 'valid'.
	
	self assert: counter equals: 2.! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:24:18' prior: 50795056!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 3. 
		self assert: aBookISBN equals: 'valid'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	
	storeModel catalogIndex: 1.
	storeModel addToCart.
	
	self assert: counter equals: 2.! !

a keys asOrderedCollection !

a keys asOrderedCollection at: 1!

a keys asOrderedCollection at: 2!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:24:49' prior: 50795076!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 3. 
		self assert: aBookISBN equals: 'valid'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:24:58'!
addToCart
	self shouldBeImplemented.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:25:19' prior: 50795120!
addToCart
	| bookName |
	bookName _ catalogNames at: catalogIndex .! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:25:34' prior: 50795125!
addToCart
	| bookName |
	
	bookName _ catalogNames at: catalogIndex .
	
	webClient add: 1 of: bookName  toCartIdentifiedAs: cartId .! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:27:03' prior: 50795131!
addToCart
	| bookName |
	
	bookName _ catalogNames at: catalogIndex .
	
	[
		webClient add: 1 of: bookName  toCartIdentifiedAs: cartId.
		cartContents add: bookName.
	] on: Error 
	do: [:anError |  ].! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:27:35' prior: 50795100!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 3. 
		self assert: aBookISBN equals: 'valid'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:27:54' prior: 50795149!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 1. 
		self assert: aBookISBN equals: 'valid'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:28:09' prior: 50795170!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 1. 
		self assert: aBookISBN equals: 'harry potter'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:28:41' prior: 50794812!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webClient _ aWebClient .
	username _ aUsername .
	password _ aPassword .
	cartId _ aCartId .
	

	
	! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:29:07' prior: 50795139!
addToCart
	| bookName |
	
	bookName _ catalogNames at: catalogIndex .
	
	[
		webClient add: 1 of: bookName  toCartIdentifiedAs: cartId.
		cartContents add: bookName.
		self triggerEvent: #cartContentsUpdated.
	] on: Error 
	do: [:anError |  ].! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:29:53' prior: 50795191!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 1. 
		self assert: aBookISBN equals: 'harry potter'. 
		self assert: aCartId equals: 24. 
		self halt.
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:30:48' prior: 50795212!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webClient _ aWebClient .
	username _ aUsername .
	password _ aPassword .
	cartId _ aCartId .
	
	cartContents _ Bag new.
	

	
	! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:30:59' prior: 50795233!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 1. 
		self assert: aBookISBN equals: 'harry potter'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:31:37' prior: 50794946!
setUp
	catalogWebClientRequestBlock _ [
		self defaultCatalog .
	].

	addToCartWebClientRequestBlock _ [:a :b :c | ].! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:31:50' prior: 50795287!
setUp
	catalogWebClientRequestBlock _ [
		self defaultCatalog .
	].

	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId | ].! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:32:29' prior: 50795266!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 1. 
		self assert: aBookISBN equals: 'harry potter'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.
	self assert: storeModel cartContents equals: (Bag new add: 'harry potter').! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:32:35'!
cartContents
	self shouldBeImplemented.
	^cartContents! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:32:37' prior: 50795325!
cartContents
	
	^cartContents! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:32:59' prior: 50795302!
test04
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 1. 
		self assert: aBookISBN equals: 'harry potter'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.
	self assert: storeModel cartContents equals: (Bag with: 'harry potter'). ! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:33:41'!
test04AlAgregarUnElementoSeNotificaAlWebClientYSeLevantaElEventoCorrespondienteSiTodoSaleBien
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 1. 
		self assert: aBookISBN equals: 'harry potter'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.
	self assert: storeModel cartContents equals: (Bag with: 'harry potter'). ! !

StoreWindowModelTest removeSelector: #test04!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:33:49'!
test05
	| storeModel counter |
	
	counter _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 1. 
		self assert: aBookISBN equals: 'harry potter'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.
	self assert: storeModel cartContents equals: (Bag with: 'harry potter'). ! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 17:35:21' prior: 50795385!
test05
	| storeModel error |
	
	error _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self error: 'super error!!'.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #addToCartFailed evaluate: [:anError | error _ anError ].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: error equals: 'super error!!'.
	self assert: storeModel cartContents equals: (Bag new). ! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:35:49' prior: 50795222!
addToCart
	| bookName |
	
	bookName _ catalogNames at: catalogIndex .
	
	[
		webClient add: 1 of: bookName  toCartIdentifiedAs: cartId.
		cartContents add: bookName.
		self triggerEvent: #cartContentsUpdated.
	] on: Error 
	do: [:anError | self triggerEvent: #addToCartFailed with: anError messageText ].! !

----SNAPSHOT----(10 July 2019 17:38:27) TusLibros-Web.image priorSource: 14814577!

----SNAPSHOT----(10 July 2019 17:43:54) TusLibros-Web.image priorSource: 14841299!

CreateCartWindowModel removeSelector: #cartContents!

CreateCartWindowModel removeSelector: #cartContentsIndex!

CreateCartWindowModel removeSelector: #cartContentsIndex:!

CreateCartWindowModel removeSelector: #catalog!

CreateCartWindowModel removeSelector: #catalogIndex!

CreateCartWindowModel removeSelector: #catalogIndex:!

----SNAPSHOT----(10 July 2019 17:52:18) TusLibros-Web.image priorSource: 14841383!
!CreateCartWindowModel methodsFor: 'window transitions' stamp: 'tf 7/10/2019 17:53:20' prior: 50791847!
goToStore
	StoreWindow withCartId: cartId username: username password: password .
! !
!CreateCartWindow methodsFor: 'access' stamp: 'tf 7/10/2019 17:53:30' prior: 50791980!
goToStore
	self model goToStore.
	self delete.
	
	! !

testObjectsFactory _ TusLibrosWebTestObjectFactory new.!

aSystemFacade _ testObjectsFactory tusLibrosSystemFacade. !

aDefaultServerController _ TusLibrosServerController listeningOn: 8080 withFacade: aSystemFacade.!

CreateCartWindow open.!
!StoreWindow methodsFor: 'nil' stamp: 'tf 7/10/2019 17:57:38'!
withCartId: cartId username: username password: password! !

StoreWindow removeSelector: #withCartId:username:password:!
!StoreWindow class methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:58:31'!
withCartId: cartId username: username password: password	
	self new withModel:  StoreWindowModel new andTitle: 'Tus Libros - Tienda'.! !
!StoreWindow class methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:58:42' prior: 50795486!
withCartId: cartId username: username password: password	
	self new withModel:  StoreWindowModel new andTitle: 'Tus Libros - Tienda'.! !
!StoreWindow class methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:58:56' prior: 50795494!
withCartId: cartId username: username password: password	
	self new withModel:  StoreWindowModel new andTitle: 'Tus Libros - Tienda (', cartId printString, ')'.! !
!StoreWindow class methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 17:59:50' prior: 50795502!
withCartId: cartId username: username password: password	
	self new 
		withModel:  (StoreWindowModel 
			withWebClient: TusLibrosWebClient new 
			cartId: cartId 
			username: username 
			andPassword: password ) 
		andTitle: 'Tus Libros - Tienda (', cartId printString, ')'.! !

StoreWindow class removeSelector: #withModel:!

CreateCartWindow open.!

StoreWindow withCartId: 23 username: 'Teo'  password: 'Teo'. !

----SNAPSHOT----(10 July 2019 18:02:32) TusLibros-Web.image priorSource: 14841798!

StoreWindow withCartId: 23 username: 'Teo'  password: 'Teo'. !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:04:25' prior: 50795255!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webClient _ aWebClient .
	username _ aUsername .
	password _ aPassword .
	cartId _ aCartId .
	
	cartContents _ Bag new.
	catalogIndex _ 0.

	
	! !

StoreWindow withCartId: 23 username: 'Teo'  password: 'Teo'. !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 18:06:12'!
test03bisPuedoCambiarElValorDeCatalogIndex
	| storeModel |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	storeModel catalogIndex: 42.
	self assert: storeModel catalogIndex equals: 42.! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 18:06:29'!
test03ElValorDeCatalogIndexComienzaEn0
	| storeModel |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.

	self assert: storeModel catalogIndex equals: 0.! !

StoreWindowModelTest removeSelector: #test03!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 18:07:03'!
test06ElValorDeCartContentsIndexComienzaEn0
	| storeModel |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.

	self assert: storeModel cartContentsIndex equals: 0.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:07:11'!
cartContentsIndex
	self shouldBeImplemented.
	^cartContentsIndex! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:07:12' prior: 50795577!
cartContentsIndex
	
	^cartContentsIndex! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 18:07:42'!
test07PuedoCambiarElValorDeCartContentsIndex
	| storeModel |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.
	storeModel cartContentsIndex: 42.
	self assert: storeModel cartContentsIndex equals: 42.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:07:48'!
cartContentsIndex: aSmallInteger 
	self shouldBeImplemented.
	cartContentsIndex _ aSmallInteger! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:07:53' prior: 50795599!
cartContentsIndex: anIndex 
	
	cartContentsIndex _ anIndex! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:08:08' prior: 50795532!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webClient _ aWebClient .
	username _ aUsername .
	password _ aPassword .
	cartId _ aCartId .
	
	cartContents _ Bag new.
	catalogIndex _ 0.
	cartContentsIndex _ 0.

	
	! !

StoreWindow withCartId: 23 username: 'Teo'  password: 'Teo'. !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:10:44' prior: 50791968!
initializeWith: aTitle
	self halt.
	self withModel: (CreateCartWindowModel new) andTitle: aTitle.! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:10:57' prior: 50792511!
buildCatalogColumn
	|addToCartButton|
	catalogList _ 
		PluggableListMorph model: self model
								listGetter: #catalog
								indexGetter: #catalogIndex
								indexSetter: #catalogIndex:.
	
	addToCartButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #addToCart
									label: 'Agregar al carrito'.
	
	^ (LayoutMorph newColumn)
					    separation: 15;
					    padding: #left;
					    addMorph: (StringMorph contents: 'Catálogo:');
					    addMorph: catalogList;
					    addMorph: addToCartButton.! !

StoreWindow withCartId: 23 username: 'Teo'  password: 'Teo'. !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:12:02' prior: 50791834!
withModel: aModel andTitle: aTitle
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (aModel);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	self model when: #catalogArrived 
			     send: #setCatalog
			     to: self.
	self model when: #cartContentsUpdated 
				send: #updateCartContents  
				to: self.
	 ! !

StoreWindow withCartId: 23 username: 'Teo'  password: 'Teo'. !

CreateCartWindow open.!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:12:49'!
updateCartContents
	cartContentsList updateList .! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:12:56' prior: 50795673!
updateCartContents
 	self halt.
	cartContentsList updateList .! !

CreateCartWindow open.!
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:14:55'!
cartContentsAsOrderedCollection
	
	| cartContentsAsOrderedCollection |
	cartContentsAsOrderedCollection _ OrderedCollection new.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:16:11' prior: 50795684!
cartContentsAsOrderedCollection
	| cartContentsAsOrderedCollection |
	
	cartContentsAsOrderedCollection _ OrderedCollection new.
	
	cartContents do: [:key | cartContentsAsOrderedCollection add: key, ' #', (cartContents occurrencesOf: key) printString ].
	
	^cartContentsAsOrderedCollection .! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:16:22' prior: 50792381!
buildCartContentsColumn
	|checkoutButton |
	cartContentsList _ 
		PluggableListMorph model: self model
								listGetter: #cartContentsAsOrderedCollection
								indexGetter: #cartContentsIndex
								indexSetter: #cartContentsIndex:.
	
	checkoutButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #CheckoutCart
									label: 'Checkout'.
	
		     
	^ (LayoutMorph newColumn)
		    padding: #left;
		    separation: 15;
		    addMorph: (StringMorph contents: 'Tu carrito:');
		    addMorph: cartContentsList;
    	    addMorph: checkoutButton;
  	          addMorph: (StringMorph contents: 'Total: $0').
		! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:16:30' prior: 50795692!
cartContentsAsOrderedCollection
	| cartContentsAsOrderedCollection |
	
	cartContentsAsOrderedCollection _ OrderedCollection new.
	
	cartContents do: [:key | cartContentsAsOrderedCollection add: key, ' #', (cartContents occurrencesOf: key) printString ].
	
	^cartContentsAsOrderedCollection .! !

CreateCartWindow open.!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:16:53' prior: 50795678!
updateCartContents

	cartContentsList updateList .! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:18:16' prior: 50795729!
cartContentsAsOrderedCollection
	| cartContentsAsOrderedCollection |
	
	cartContentsAsOrderedCollection _ OrderedCollection new.
	
	cartContents keysDo: [:key | cartContentsAsOrderedCollection add: key, ' #', (cartContents occurrencesOf: key) printString ].
	
	^cartContentsAsOrderedCollection .! !

CreateCartWindow open.!
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:18:36' prior: 50795747!
cartContentsAsOrderedCollection
	| cartContentsAsOrderedCollection |
	
	cartContentsAsOrderedCollection _ OrderedCollection new.
	
	cartContents keys do: [:key | cartContentsAsOrderedCollection add: key, ' #', (cartContents occurrencesOf: key) printString ].
	
	^cartContentsAsOrderedCollection .! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:19:16' prior: 50795761!
cartContentsAsOrderedCollection
	| cartContentsAsOrderedCollection |
	
	cartContentsAsOrderedCollection _ OrderedCollection new.
	
	cartContents contents keysDo: [:key | cartContentsAsOrderedCollection add: key, ' #', (cartContents occurrencesOf: key) printString ].
	
	^cartContentsAsOrderedCollection .! !

CreateCartWindow open.!
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 18:22:52'!
test08ElValorDelSubTotalComienzaEn0
	| storeModel |
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 23  username: 'Valid'  andPassword: 'ValidP'.

	self assert: storeModel subTotal equals: 0.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:23:16'!
subTotal
	self shouldBeImplemented.! !

!classDefinition: #StoreWindowModel category: #'TusLibros-Web'!
Object subclass: #StoreWindowModel
	instanceVariableNames: 'username password webClient cartId catalog catalogIndex cartContents cartContentsIndex listableCatalog catalogAsDict catalogNames subTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:23:20' prior: 50795798!
subTotal
	^subTotal.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:23:32' prior: 50795612!
initializewithWebClient: aWebClient 
	cartId: aCartId 
	username: aUsername 
	andPassword: aPassword 
	
	webClient _ aWebClient .
	username _ aUsername .
	password _ aPassword .
	cartId _ aCartId .
	
	cartContents _ Bag new.
	catalogIndex _ 0.
	cartContentsIndex _ 0.
	subTotal _ 0.

	
	! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 18:24:39'!
test09AlAgregarUnElementoSeIncrementaAcordeElSubTotal
	| storeModel |
	

	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: storeModel subTotal equals: 231. ! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:25:17' prior: 50795429!
addToCart
	| bookName |
	
	bookName _ catalogNames at: catalogIndex .
	
	[
		webClient add: 1 of: bookName  toCartIdentifiedAs: cartId.
		cartContents add: bookName.
		subTotal _ subTotal + 0.
		self triggerEvent: #cartContentsUpdated.
	] on: Error 
	do: [:anError | self triggerEvent: #addToCartFailed with: anError messageText ].! !

!classDefinition: #StoreWindowModel category: #'TusLibros-Web'!
Object subclass: #StoreWindowModel
	instanceVariableNames: 'username password webClient cartId catalog catalogIndex cartContents cartContentsIndex listableCatalog catalogAsDict catalogNames subTotal originalCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:25:58' prior: 50794797!
initializeCatalog
	
	catalog _ OrderedCollection new.
	catalogNames _ OrderedCollection new.
	[
		originalCatalog _ webClient catalog .
		originalCatalog keysAndValuesDo: [:key :value | 
			catalog add: key, ' $', value printString.
			catalogNames add: key.
		self triggerEvent: #catalogUpdated.
		].
	] on: Error 
		do: [:anError |  self triggerEvent: #catalogRequestFailed with: anError messageText ]! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:26:21' prior: 50795844!
addToCart
	| bookName |
	
	bookName _ catalogNames at: catalogIndex .
	
	[
		webClient add: 1 of: bookName  toCartIdentifiedAs: cartId.
		cartContents add: bookName.
		subTotal _ subTotal + originalCatalog at: bookName .
		self triggerEvent: #cartContentsUpdated.
	] on: Error 
	do: [:anError | self triggerEvent: #addToCartFailed with: anError messageText ].! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 18:26:32' prior: 50795829!
test09AlAgregarUnElementoSeIncrementaAcordeElSubTotal
	| storeModel |
	

	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: storeModel subTotal equals: 231. 
	
	storeModel catalogIndex: 0.
	
	storeModel addToCart.
	
	self assert: storeModel subTotal equals: 231. ! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 18:26:38' prior: 50795900!
test09AlAgregarUnElementoSeIncrementaAcordeElSubTotal
	| storeModel |
	

	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: storeModel subTotal equals: 231. 
	
	storeModel catalogIndex: 0.
	
	storeModel addToCart.
	
	self assert: storeModel subTotal equals: 231 + 23. ! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 18:26:45' prior: 50795918!
test09AlAgregarUnElementoSeIncrementaAcordeElSubTotal
	| storeModel |
	

	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: storeModel subTotal equals: 231. 
	
	storeModel catalogIndex: 2.
	
	storeModel addToCart.
	
	self assert: storeModel subTotal equals: 231 + 23. ! !

!classDefinition: #StoreWindow category: #'TusLibros-Web'!
Panel subclass: #StoreWindow
	instanceVariableNames: 'catalogList cartContentsList subtotalText'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:28:27' prior: 50795705!
buildCartContentsColumn
	|checkoutButton |
	cartContentsList _ 
		PluggableListMorph model: self model
								listGetter: #cartContentsAsOrderedCollection
								indexGetter: #cartContentsIndex
								indexSetter: #cartContentsIndex:.
	
	checkoutButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #CheckoutCart
									label: 'Checkout'.
									
	subtotalText _ StringMorph contents: 'Total: $0'.
	
		     
	^ (LayoutMorph newColumn)
		    padding: #left;
		    separation: 15;
		    addMorph: (StringMorph contents: 'Tu carrito:');
		    addMorph: cartContentsList;
    	    addMorph: checkoutButton;
  	          addMorph: subtotalText.
		! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:28:42' prior: 50795742!
updateCartContents

	cartContentsList updateList .
	subtotalText contents: 'Teo'.! !

CreateCartWindow open.!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:29:18' prior: 50795986!
updateCartContents

	cartContentsList updateList .
	subtotalText contents: 'Total $', self model subTotal .! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:29:22' prior: 50795993!
updateCartContents

	cartContentsList updateList .
	subtotalText contents: 'Total $', self model subTotal printString .! !

CreateCartWindow open.!

----SNAPSHOT----(10 July 2019 18:30:26) TusLibros-Web.image priorSource: 14844031!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:39:21' prior: 50795656!
withModel: aModel andTitle: aTitle
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (aModel);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	self model when: #catalogArrived 
			     send: #setCatalog
			     to: self.
	self model when: #cartContentsUpdated 
				send: #updateCartContents  
				to: self.
	self model when: #catalogRequestFailed
				send: #showError:
				to: self.
	self model when: #addToCartFailed
				send: #showError:
				to: self.! !

!classDefinition: #StoreWindow category: #'TusLibros-Web'!
Panel subclass: #StoreWindow
	instanceVariableNames: 'catalogList cartContentsList subtotalText errorTextBox'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:39:40'!
showError: anErrorMessage
	errorTextBox contents: anErrorMessage .! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:40:18' prior: 50795961!
buildCartContentsColumn
	|checkoutButton |
	cartContentsList _ 
		PluggableListMorph model: self model
								listGetter: #cartContentsAsOrderedCollection
								indexGetter: #cartContentsIndex
								indexSetter: #cartContentsIndex:.
	
	checkoutButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #CheckoutCart
									label: 'Checkout'.
									
	subtotalText _ StringMorph contents: 'Total: $0'.
	
	errorTextBox _ StringMorph contents: ''.
	
		     
	^ (LayoutMorph newColumn)
		    padding: #left;
		    separation: 15;
		    addMorph: (StringMorph contents: 'Tu carrito:');
		    addMorph: cartContentsList;
    	    addMorph: checkoutButton;
  	          addMorph: subtotalText;
		    addMorph: errorTextBox .
		! !

CreateCartWindow open.!

aDefaultServerController stopListening ; destroy.!

testObjectsFactory _ TusLibrosWebTestObjectFactory new.!

aSystemFacade _ testObjectsFactory tusLibrosSystemFacade. !

aDefaultServerController _ TusLibrosServerController listeningOn: 8080 withFacade: aSystemFacade.!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:41:03' prior: 50796038!
showError: anErrorMessage
	errorTextBox contents: 'ERROR: ', anErrorMessage .! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:41:35' prior: 50796044!
buildCartContentsColumn
	|checkoutButton |
	cartContentsList _ 
		PluggableListMorph model: self model
								listGetter: #cartContentsAsOrderedCollection
								indexGetter: #cartContentsIndex
								indexSetter: #cartContentsIndex:.
	
	checkoutButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #goToCheckout
									label: 'Checkout'.
									
	subtotalText _ StringMorph contents: 'Total: $0'.
	
	errorTextBox _ StringMorph contents: ''.
	
		     
	^ (LayoutMorph newColumn)
		    padding: #left;
		    separation: 15;
		    addMorph: (StringMorph contents: 'Tu carrito:');
		    addMorph: cartContentsList;
    	    addMorph: checkoutButton;
  	          addMorph: subtotalText;
		    addMorph: errorTextBox .
		! !
!StoreWindowModel methodsFor: 'nil' stamp: 'tf 7/10/2019 18:42:54'!
goToCheckout! !

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:43:57' prior: 50796114!
goToCheckout
	CheckOutWindow withCartId: cartId usernam: username password: password.! !
!StoreWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:46:05' prior: 50796124!
goToCheckout
	CheckOutWindow withCartId: cartId usernam: username password: password.
	self triggerEvent: #checkOutWindowCreated.! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:46:48' prior: 50796011!
withModel: aModel andTitle: aTitle
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (aModel);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	self model when: #catalogArrived 
			     send: #setCatalog
			     to: self.
	self model when: #cartContentsUpdated 
				send: #updateCartContents  
				to: self.
	self model when: #catalogRequestFailed
				send: #showError:
				to: self.
	self model when: #addToCartFailed
				send: #showError:
				to: self.
	self model  when: #checkOutWindowCreated 
				send: #delete  
				to: self. ! !
!CheckOutWindow class methodsFor: 'no messages' stamp: 'tf 7/10/2019 18:47:24'!
withCartId: cartId usernam: username password: password

	^self new initializeWithCartId: cartId usernam: username password: password.! !
!CheckOutWindow class methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:47:30' prior: 50796159!
withCartId: cartId usernam: username password: password

	^self new initializeWithCartId: cartId username: username password: password.! !
!CheckOutWindow methodsFor: 'no messages' stamp: 'tf 7/10/2019 18:47:39'!
initializeWithCartId: cartId username: username password: password! !

CreateCartWindow open.!

----SNAPSHOT----(10 July 2019 18:48:58) TusLibros-Web.image priorSource: 14859411!

----QUIT----(10 July 2019 18:49:01) TusLibros-Web.image priorSource: 14864926!

----STARTUP---- (10 July 2019 18:49:07) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


----QUIT----(10 July 2019 18:49:17) TusLibros-Web.image priorSource: 14865010!

----STARTUP---- (10 July 2019 19:05:16) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!

!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:06:17' prior: 50796087!
buildCartContentsColumn
	|checkoutButton |
	cartContentsList _ 
		PluggableListMorph model: self model
								listGetter: #cartContentsAsOrderedCollection
								indexGetter: #cartContentsIndex
								indexSetter: nil.
	
	checkoutButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #goToCheckout
									label: 'Checkout'.
									
	subtotalText _ StringMorph contents: 'Total: $0'.
	
	errorTextBox _ StringMorph contents: ''.
	
		     
	^ (LayoutMorph newColumn)
		    padding: #left;
		    separation: 15;
		    addMorph: (StringMorph contents: 'Tu carrito:');
		    addMorph: cartContentsList;
    	    addMorph: checkoutButton;
  	          addMorph: subtotalText;
		    addMorph: errorTextBox .
		! !

CreateCartWindow open.!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:06:52' prior: 50796197!
buildCartContentsColumn
	|checkoutButton |
	cartContentsList _ 
		PluggableListMorph model: self model
								listGetter: #cartContentsAsOrderedCollection
								indexGetter: nil
								indexSetter: nil.
	
	checkoutButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #goToCheckout
									label: 'Checkout'.
									
	subtotalText _ StringMorph contents: 'Total: $0'.
	
	errorTextBox _ StringMorph contents: ''.
	
		     
	^ (LayoutMorph newColumn)
		    padding: #left;
		    separation: 15;
		    addMorph: (StringMorph contents: 'Tu carrito:');
		    addMorph: cartContentsList;
    	    addMorph: checkoutButton;
  	          addMorph: subtotalText;
		    addMorph: errorTextBox .
		! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 18:41:35' prior: 50796225!
buildCartContentsColumn
	|checkoutButton |
	cartContentsList _ 
		PluggableListMorph model: self model
								listGetter: #cartContentsAsOrderedCollection
								indexGetter: #cartContentsIndex
								indexSetter: #cartContentsIndex:.
	
	checkoutButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #goToCheckout
									label: 'Checkout'.
									
	subtotalText _ StringMorph contents: 'Total: $0'.
	
	errorTextBox _ StringMorph contents: ''.
	
		     
	^ (LayoutMorph newColumn)
		    padding: #left;
		    separation: 15;
		    addMorph: (StringMorph contents: 'Tu carrito:');
		    addMorph: cartContentsList;
    	    addMorph: checkoutButton;
  	          addMorph: subtotalText;
		    addMorph: errorTextBox .
		! !
!StoreWindowModelTest methodsFor: 'webclient protocol' stamp: 'tf 7/10/2019 19:08:04'!
test05SiAlAgregarUnElementoElWebClientLevantaUnaExcepcionSeLevantaAlEventoYNoSeModificanLosContenidosDelCarrito
	| storeModel error |
	
	error _ 0.
	addToCartWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self error: 'super error!!'.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #addToCartFailed evaluate: [:anError | error _ anError ].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: error equals: 'super error!!'.
	self assert: storeModel cartContents equals: (Bag new). ! !

StoreWindowModelTest removeSelector: #test05!

CreateCartWindowModelTest removeSelector: #catalog!

----SNAPSHOT----(10 July 2019 19:09:30) TusLibros-Web.image priorSource: 14865228!

Object subclass: #CheckOutWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

TestCase subclass: #CheckOutWindowModelTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

!classDefinition: #CheckOutWindowModelTest category: #'TusLibros-Web'!
TestCase subclass: #CheckOutWindowModelTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

----SNAPSHOT----(10 July 2019 19:10:19) TusLibros-Web.image priorSource: 14868910!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:10:37'!
initializeWith: aTitle cartId: cartId username: username password: password! !

CheckOutWindow removeSelector: #initializeWithCartId:username:password:!
!CheckOutWindow class methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:10:53' prior: 50796167!
withCartId: cartId usernam: username password: password

	^self new initializeWith: 'Some title' cartId: cartId username: username password: password.! !

StoreWindow removeSelector: #initializeWith:!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:12:00' prior: 50796332!
initializeWith: aTitle cartId: cartId username: username password: password
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (CheckOutWindowModel withCartId: cartId username: username password: password);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	self model when: #catalogArrived 
			     send: #setCatalog
			     to: self.
	self model when: #cartContentsUpdated 
				send: #updateCartContents  
				to: self.
	self model when: #catalogRequestFailed
				send: #showError:
				to: self.
	self model when: #addToCartFailed
				send: #showError:
				to: self.
	self model  when: #checkOutWindowCreated 
				send: #delete  
				to: self. ! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:12:12' prior: 50796351!
initializeWith: aTitle cartId: cartId username: username password: password
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (CheckOutWindowModel withCartId: cartId username: username password: password);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	! !
!CheckOutWindow class methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:12:34' prior: 50796341!
withCartId: cartId usernam: username password: password

	^self new initializeWith: 'Checkout (', cartId printString, ')' cartId: cartId username: username password: password.! !

CreateCartWindow open.!
!CheckOutWindowModel class methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:13:02'!
withCartId: aSmallInteger username: aText password: aText3 
	self shouldBeImplemented.! !
!CheckOutWindowModel class methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:13:10' prior: 50796401!
withCartId: aCartId username: aText password: aText3 
	self shouldBeImplemented.! !
!CheckOutWindowModel class methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:13:40' prior: 50796408!
withCartId: aCartId username: aUsername password: aPassword 
	^self new initializeWithCartId: aCartId username: aUsername password: aPassword .! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:13:46'!
initializeWithCartId: aSmallInteger username: aText password: aText3 
	self shouldBeImplemented.! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:14:02' prior: 50796423!
initializeWithCartId: aCartId username: aUsername password: aPassword 
	! !
!CheckOutWindow class methodsFor: 'nil' stamp: 'tf 7/10/2019 19:14:57'!
buildMorphicWindow
	self layoutMorph beRow;
		 separation: 15;
		 padding: #left;
		 addMorph: self buildCheckOutColumn;
		 addMorph: self buildTranscriptColumn.! !

CreateCartWindow open.!

CheckOutWindow class removeSelector: #buildMorphicWindow!
!CheckOutWindow methodsFor: 'nil' stamp: 'tf 7/10/2019 19:17:59'!
buildMorphicWindow
	self layoutMorph beRow;
		 separation: 15;
		 padding: #left;
		 addMorph: self buildCheckOutColumn;
		 addMorph: self buildTranscriptColumn.! !
!CreateCartWindow methodsFor: 'GUI building' stamp: 'tf 7/10/2019 19:18:30' prior: 50789544!
buildPasswordRow

	passwordTextBox _ TextModelMorph
		textProvider: self model
		textGetter: #password
		textSetter: #password: .
		
	passwordTextBox textMorph
		setProperty: #keyStroke:
		toValue: [ :key |
			passwordTextBox textMorph acceptContents ].
	passwordTextBox
		borderWidth: 1;
		borderColor: Color skyBlue.
		
	^ (LayoutMorph newRow) separation: 25;
		padding: #left;
		addMorph: (StringMorph contents: 'Contraseña:');
		addMorph: passwordTextBox;
		yourself.! !
!CreateCartWindow methodsFor: 'GUI building' stamp: 'tf 7/10/2019 19:20:31' prior: 50796454!
buildPasswordRow

	passwordTextBox _ TextModelMorph
		textProvider: self model
		textGetter: #password
		textSetter: #password: .
		
	passwordTextBox textMorph
		setProperty: #keyStroke:
		toValue: [ :key |
			key isTab 
				ifTrue: [] 
				ifFalse: [passwordTextBox textMorph acceptContents]
		].
	passwordTextBox
		borderWidth: 1;
		borderColor: Color skyBlue.
		
	^ (LayoutMorph newRow) separation: 25;
		padding: #left;
		addMorph: (StringMorph contents: 'Contraseña:');
		addMorph: passwordTextBox;
		yourself.! !

CreateCartWindow open.!
!CreateCartWindow methodsFor: 'GUI building' stamp: 'tf 7/10/2019 19:20:47' prior: 50796472!
buildPasswordRow

	passwordTextBox _ TextModelMorph
		textProvider: self model
		textGetter: #password
		textSetter: #password: .
		
	passwordTextBox textMorph
		setProperty: #keyStroke:
		toValue: [ :key |
			self halt
			key isTab 
				ifTrue: [] 
				ifFalse: [passwordTextBox textMorph acceptContents]
		].
	passwordTextBox
		borderWidth: 1;
		borderColor: Color skyBlue.
		
	^ (LayoutMorph newRow) separation: 25;
		padding: #left;
		addMorph: (StringMorph contents: 'Contraseña:');
		addMorph: passwordTextBox;
		yourself.! !
!CreateCartWindow methodsFor: 'GUI building' stamp: 'tf 7/10/2019 19:20:48' prior: 50796492!
buildPasswordRow

	passwordTextBox _ TextModelMorph
		textProvider: self model
		textGetter: #password
		textSetter: #password: .
		
	passwordTextBox textMorph
		setProperty: #keyStroke:
		toValue: [ :key |
			self halt.
			key isTab 
				ifTrue: [] 
				ifFalse: [passwordTextBox textMorph acceptContents]
		].
	passwordTextBox
		borderWidth: 1;
		borderColor: Color skyBlue.
		
	^ (LayoutMorph newRow) separation: 25;
		padding: #left;
		addMorph: (StringMorph contents: 'Contraseña:');
		addMorph: passwordTextBox;
		yourself.! !

CreateCartWindow open.!

CreateCartWindow open.!

self isTab !

self isTab !

self isTab !
!CreateCartWindow methodsFor: 'GUI building' stamp: 'tf 7/10/2019 19:23:32' prior: 50796512!
buildPasswordRow

	passwordTextBox _ TextModelMorph
		textProvider: self model
		textGetter: #password
		textSetter: #password: .
		
	passwordTextBox textMorph
		setProperty: #keyStroke:
		toValue: [ :key |
			key isTab 
				ifTrue: [self halt.] 
				ifFalse: [passwordTextBox textMorph acceptContents]
		].
	passwordTextBox
		borderWidth: 1;
		borderColor: Color skyBlue.
		
	^ (LayoutMorph newRow) separation: 25;
		padding: #left;
		addMorph: (StringMorph contents: 'Contraseña:');
		addMorph: passwordTextBox;
		yourself.! !

CreateCartWindow open.!
!CreateCartWindow methodsFor: 'GUI building' stamp: 'tf 7/10/2019 19:18:30' prior: 50796535!
buildPasswordRow

	passwordTextBox _ TextModelMorph
		textProvider: self model
		textGetter: #password
		textSetter: #password: .
		
	passwordTextBox textMorph
		setProperty: #keyStroke:
		toValue: [ :key |
			passwordTextBox textMorph acceptContents ].
	passwordTextBox
		borderWidth: 1;
		borderColor: Color skyBlue.
		
	^ (LayoutMorph newRow) separation: 25;
		padding: #left;
		addMorph: (StringMorph contents: 'Contraseña:');
		addMorph: passwordTextBox;
		yourself.! !
!CreateCartWindow methodsFor: 'GUI building' stamp: 'tf 7/10/2019 19:24:18' prior: 50796556!
buildPasswordRow

	passwordTextBox _ TextModelMorph
		textProvider: self model
		textGetter: #password
		textSetter: #password: .
		
	passwordTextBox textMorph
		setProperty: #keyStroke:
		toValue: [ :key |
			passwordTextBox textMorph acceptContents ].
		
	passwordTextBox
		borderWidth: 1;
		borderColor: Color skyBlue.
		
	^ (LayoutMorph newRow) separation: 25;
		padding: #left;
		addMorph: (StringMorph contents: 'Contraseña:');
		addMorph: passwordTextBox;
		yourself.! !

CreateCartWindow open.!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:24:44'!
buildCheckOutColumn
	self shouldBeImplemented.! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:24:45' prior: 50796593!
buildCheckOutColumn
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:24:53'!
buildTranscriptColumn
	self shouldBeImplemented.! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 19:24:54' prior: 50796602!
buildTranscriptColumn
	! !

----SNAPSHOT----(10 July 2019 19:25:32) TusLibros-Web.image priorSource: 14869704!

----SNAPSHOT----(10 July 2019 19:26:03) TusLibros-Web.image priorSource: 14878714!

----QUIT----(10 July 2019 19:27:17) TusLibros-Web.image priorSource: 14878798!

----STARTUP---- (10 July 2019 20:35:44) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


----QUIT----(10 July 2019 20:36:12) TusLibros-Web.image priorSource: 14878882!

----STARTUP---- (10 July 2019 23:56:40) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!


!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId username'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId username password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 23:57:34' prior: 50796430!
initializeWithCartId: aCartId username: aUsername password: aPassword 
	cartId _ aCartId .
	username _ aUsername .
	password _ aPassword .! !

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/10/2019 23:59:22' prior: 50796598!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	 
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:00:46' prior: 50796666!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
	! !

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox ownersNameTextBox'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:01:14' prior: 50796675!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
	! !

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox ownersNameTextBox expirationDateMonthTextBox'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:02:23' prior: 50796698!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateMonthTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
	! !

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox ownersNameTextBox expirationDateMonthTextBox expirationDateYearTextBox'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:02:37' prior: 50796733!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateMonthTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	expirationDateMonthTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateMonthTextBox textMorph acceptContents 
		].
	expirationDateMonthTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateYearTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
	! !

#(1 2 3 4)!

a _ 0.!

#(1 2 3 4) do: [:x | a _ a + x].!

a!

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox ownersNameTextBox expirationDateMonthTextBox expirationDateYearTextBox payButton'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:08:43' prior: 50796789!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateMonthTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	expirationDateMonthTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateMonthTextBox textMorph acceptContents 
		].
	expirationDateMonthTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateYearTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	expirationDateYearTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateYearTextBox textMorph acceptContents 
		].
	expirationDateYearTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #doCheckout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date month');
		addMorph: expirationDateMonthTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date year');
		addMorph: expirationDateYearTextBox ;
		addMorph: payButton .
			
	! !

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox ownersNameTextBox expirationDateMonthTextBox expirationDateYearTextBox payButton transcriptList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:10:22' prior: 50796607!
buildTranscriptColumn

	transcriptList _ 
		PluggableListMorph model: self model 
								listGetter: #listPurchases 
								indexGetter: nil  
								indexSetter: nil.
								 
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Compras:');
		addMorph: nil.
			
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:10:27' prior: 50796926!
buildTranscriptColumn

	transcriptList _ 
		PluggableListMorph model: self model 
								listGetter: #listPurchases 
								indexGetter: nil  
								indexSetter: nil.
								 
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Compras:');
		addMorph: transcriptList .
			
	! !

CreateCartWindow open.!

!classDefinition: #CheckOutWindowModelTest category: #'TusLibros-Web'!
TestCase subclass: #CheckOutWindowModelTest
	instanceVariableNames: 'checkoutModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindowModelTest methodsFor: 'nil' stamp: 'tf 7/11/2019 00:11:55'!
setUp
	
	checkoutModel _ 
		CheckOutWindowModel 
			withCartId: self cartId 
			username: self username 
			password: self password. ! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:12:32'!
test01
	
	self assert: checkoutModel creditCardNumber equals: ''.
 ! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:12:39'!
cartId
	self shouldBeImplemented.! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:12:43' prior: 50796974!
cartId
	^23.! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:12:48'!
username
	self shouldBeImplemented.! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:12:52' prior: 50796983!
username
	^'Valid'.! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:12:58'!
password
	self shouldBeImplemented.! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:13:02' prior: 50796992!
password
	^'ValidP'.! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:13:08'!
creditCardNumber
	self shouldBeImplemented.! !

!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId username password creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:13:16' prior: 50797001!
creditCardNumber
	^creditCardNumber! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:13:29' prior: 50796651!
initializeWithCartId: aCartId username: aUsername password: aPassword 
	cartId _ aCartId .
	username _ aUsername .
	password _ aPassword .
	
	creditCardNumber _ ''.! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:13:54'!
test02
	
	checkoutModel creditCardNumber: '123tteeoo'.
	self assert: checkoutModel creditCardNumber equals: '123tteeoo'.
 ! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:14:00'!
creditCardNumber: aString 
	self shouldBeImplemented.
	creditCardNumber _ aString! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:14:01' prior: 50797035!
creditCardNumber: aString 
	
	creditCardNumber _ aString! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:15:11' prior: 50796848!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #ownersName
		textSetter: #ownersName: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateMonthTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	expirationDateMonthTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateMonthTextBox textMorph acceptContents 
		].
	expirationDateMonthTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateYearTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	expirationDateYearTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateYearTextBox textMorph acceptContents 
		].
	expirationDateYearTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #doCheckout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date month');
		addMorph: expirationDateMonthTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date year');
		addMorph: expirationDateYearTextBox ;
		addMorph: payButton .
			
	! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:15:13'!
test03
	
	self assert: checkoutModel ownersName equals: ''.
 ! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:15:19'!
ownersName
	self shouldBeImplemented.! !

!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId username password creditCardNumber ownersName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:15:25' prior: 50797118!
ownersName
	^ownersName.! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:15:41' prior: 50797019!
initializeWithCartId: aCartId username: aUsername password: aPassword 
	cartId _ aCartId .
	username _ aUsername .
	password _ aPassword .
	
	creditCardNumber _ ''.
	ownersName _ ''.! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:15:55'!
test04
	
	checkoutModel ownersName: '123tteeoo'.
	self assert: checkoutModel ownersName equals: '123tteeoo'.
 ! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:16:00'!
ownersName: aString 
	self shouldBeImplemented.
	ownersName _ aString! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:16:01' prior: 50797152!
ownersName: aString 
	
	ownersName _ aString! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:16:17' prior: 50797046!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #ownersName
		textSetter: #ownersName: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateMonthTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #expirationDateMonth
		textSetter: #expirationDateMonth: .
	expirationDateMonthTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateMonthTextBox textMorph acceptContents 
		].
	expirationDateMonthTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateYearTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	expirationDateYearTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateYearTextBox textMorph acceptContents 
		].
	expirationDateYearTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #doCheckout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date month');
		addMorph: expirationDateMonthTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date year');
		addMorph: expirationDateYearTextBox ;
		addMorph: payButton .
			
	! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:16:22' prior: 50797113!
test03
	
	self assert: checkoutModel expirationDateMonth equals: ''.
 ! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:16:28'!
test05
	
	self assert: checkoutModel expirationDateMonth equals: ''.
 ! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:15:13' prior: 50797231!
test03
	
	self assert: checkoutModel ownersName equals: ''.
 ! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:16:41'!
expirationDateMonth
	self shouldBeImplemented.! !

!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId username password creditCardNumber ownersName expirationDateMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:16:49' prior: 50797248!
expirationDateMonth
	^expirationDateMonth! !

Month unStream: '07/2020'!

Month readFrom: '07/2020'!

Month readFrom: '07/2020' readStream !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:18:10' prior: 50797163!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #ownersName
		textSetter: #ownersName: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateMonthTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #expirationDate
		textSetter: #expirationDate: .
	expirationDateMonthTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateMonthTextBox textMorph acceptContents 
		].
	expirationDateMonthTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #doCheckout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date month');
		addMorph: expirationDateMonthTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date year');
		addMorph: expirationDateYearTextBox ;
		addMorph: payButton .
			
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:18:26' prior: 50797270!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #ownersName
		textSetter: #ownersName: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateMonthTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #expirationDate
		textSetter: #expirationDate: .
	expirationDateMonthTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateMonthTextBox textMorph acceptContents 
		].
	expirationDateMonthTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #doCheckout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date (mm/yyyy)');
		addMorph: expirationDateMonthTextBox ;
		addMorph: payButton .
			
	! !

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox ownersNameTextBox expirationDateMonthTextBox expirationDateYearTextBox payButton transcriptList expirationDateTextBox'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:18:31' prior: 50797326!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #ownersName
		textSetter: #ownersName: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #expirationDate
		textSetter: #expirationDate: .
	expirationDateTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateTextBox textMorph acceptContents 
		].
	expirationDateTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #doCheckout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date (mm/yyyy)');
		addMorph: expirationDateTextBox ;
		addMorph: payButton .
			
	! !

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox ownersNameTextBox expirationDateYearTextBox payButton transcriptList expirationDateTextBox'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox ownersNameTextBox  payButton transcriptList expirationDateTextBox'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox ownersNameTextBox payButton transcriptList expirationDateTextBox'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:18:47' prior: 50797237!
test05
	
	self assert: checkoutModel expirationDate equals: ''.
 ! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:18:54'!
expirationDate
	self shouldBeImplemented.! !

!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId username password creditCardNumber ownersName expirationDateMonth expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:19:07' prior: 50797473!
expirationDate
	^expirationDate.! !

Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId username password creditCardNumber ownersName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId username password creditCardNumber ownersName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!

CheckOutWindowModel removeSelector: #expirationDateMonth!
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:19:33' prior: 50797136!
initializeWithCartId: aCartId username: aUsername password: aPassword 
	cartId _ aCartId .
	username _ aUsername .
	password _ aPassword .
	
	creditCardNumber _ ''.
	ownersName _ ''.
	expirationDate _ ''.! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:19:45' prior: 50797145!
test04
	
	checkoutModel expirationDate: '123tteeoo'.
	self assert: checkoutModel expirationDate equals: '123tteeoo'.
 ! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:19:51'!
expirationDate: aString 
	self shouldBeImplemented.
	expirationDate _ aString! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:19:52' prior: 50797526!
expirationDate: aString 
	
	expirationDate _ aString! !

CreateCartWindow open.!

a _ StringMorph contents: 'teo'.!

a.!

a _ StringMorph contents: 'da'.!

a.!

CreateCartWindow open.!

CreateCartWindow open.!

self contents: 'ba'.!

self last: (StringMorph contents: 'bhhgf')!

self class!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:29:38' prior: 50796445!
buildMorphicWindow
	self layoutMorph beRow;
		 separation: 15;
		 padding: #left;
		 addMorph: self buildCheckOutColumn.! !

CreateCartWindow open.!

----QUIT----(11 July 2019 00:30:28) TusLibros-Web.image priorSource: 14879100!

----STARTUP---- (11 July 2019 08:59:27) as /home/teofr/Documents/IngBkp/Ing1-2019/32.3-TusLibros.com-Final/linux64/TusLibros-Web.image!

!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:00:15'!
openTranscriptColumn

	transcriptList _ 
		PluggableListMorph model: self model 
								listGetter: #listPurchases 
								indexGetter: nil  
								indexSetter: nil.
								 
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Compras:');
		addMorph: transcriptList .
			
	! !

CheckOutWindow removeSelector: #buildTranscriptColumn!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:00:18'!
openTranscript

	transcriptList _ 
		PluggableListMorph model: self model 
								listGetter: #listPurchases 
								indexGetter: nil  
								indexSetter: nil.
								 
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Compras:');
		addMorph: transcriptList .
			
	! !

CheckOutWindow removeSelector: #openTranscriptColumn!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:01:00' prior: 50797575!
openTranscript

	| transcriptPanel |
	transcriptPanel _ Panel open.
	transcriptList _ 
		PluggableListMorph model: self model 
								listGetter: #listPurchases 
								indexGetter: nil  
								indexSetter: nil.
								 
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Compras:');
		addMorph: transcriptList .
			
	! !

a _ Panel open.!

a _ Panel new.!

a _ Panel new.!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:02:00' prior: 50797590!
openTranscript

			
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:03:55' prior: 50797390!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #ownersName
		textSetter: #ownersName: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #expirationDate
		textSetter: #expirationDate: .
	expirationDateTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateTextBox textMorph acceptContents 
		].
	expirationDateTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #doCheckout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date (mm/yyyy)');
		addMorph: expirationDateTextBox ;
		addMorph: payButton .
			
	! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:05:48' prior: 50795633!
buildCatalogColumn
	|addToCartButton|
	catalogList _ 
		PluggableListMorph model: self model
								listGetter: #catalog
								indexGetter: #catalogIndex
								indexSetter: #catalogIndex:.
	catalogList height: 100.
	
	addToCartButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #addToCart
									label: 'Agregar al carrito'.
	
	^ (LayoutMorph newColumn)
					    separation: 15;
					    padding: #left;
					    addMorph: (StringMorph contents: 'Catálogo:');
					    addMorph: catalogList;
					    addMorph: addToCartButton.! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:05:51' prior: 50797663!
buildCatalogColumn
	|addToCartButton|
	catalogList _ 
		PluggableListMorph model: self model
								listGetter: #catalog
								indexGetter: #catalogIndex
								indexSetter: #catalogIndex:.
	catalogList height: 200.
	
	addToCartButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #addToCart
									label: 'Agregar al carrito'.
	
	^ (LayoutMorph newColumn)
					    separation: 15;
					    padding: #left;
					    addMorph: (StringMorph contents: 'Catálogo:');
					    addMorph: catalogList;
					    addMorph: addToCartButton.! !

CreateCartWindow open.!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:06:37' prior: 50797685!
buildCatalogColumn
	|addToCartButton|
	catalogList _ 
		PluggableListMorph model: self model
								listGetter: #catalog
								indexGetter: #catalogIndex
								indexSetter: #catalogIndex:.
	catalogList morphHeight: 200.
	
	addToCartButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #addToCart
									label: 'Agregar al carrito'.
	
	^ (LayoutMorph newColumn)
					    separation: 15;
					    padding: #left;
					    addMorph: (StringMorph contents: 'Catálogo:');
					    addMorph: catalogList;
					    addMorph: addToCartButton.! !

CreateCartWindow open.!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:06:55' prior: 50797707!
buildCatalogColumn
	|addToCartButton|
	catalogList _ 
		PluggableListMorph model: self model
								listGetter: #catalog
								indexGetter: #catalogIndex
								indexSetter: #catalogIndex:.
	catalogList morphHeight: 350.
	
	addToCartButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #addToCart
									label: 'Agregar al carrito'.
	
	^ (LayoutMorph newColumn)
					    separation: 15;
					    padding: #left;
					    addMorph: (StringMorph contents: 'Catálogo:');
					    addMorph: catalogList;
					    addMorph: addToCartButton.! !

CreateCartWindow open.!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:07:12' prior: 50797730!
buildCatalogColumn
	|addToCartButton|
	catalogList _ 
		PluggableListMorph model: self model
								listGetter: #catalog
								indexGetter: #catalogIndex
								indexSetter: #catalogIndex:.
	catalogList morphHeight: 300.
	
	addToCartButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #addToCart
									label: 'Agregar al carrito'.
	
	^ (LayoutMorph newColumn)
					    separation: 15;
					    padding: #left;
					    addMorph: (StringMorph contents: 'Catálogo:');
					    addMorph: catalogList;
					    addMorph: addToCartButton.! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:07:24' prior: 50797753!
buildCatalogColumn
	|addToCartButton|
	catalogList _ 
		PluggableListMorph model: self model
								listGetter: #catalog
								indexGetter: #catalogIndex
								indexSetter: #catalogIndex:.
	catalogList morphHeight: self listHeight.
	
	addToCartButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #addToCart
									label: 'Agregar al carrito'.
	
	^ (LayoutMorph newColumn)
					    separation: 15;
					    padding: #left;
					    addMorph: (StringMorph contents: 'Catálogo:');
					    addMorph: catalogList;
					    addMorph: addToCartButton.! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:07:38' prior: 50796252!
buildCartContentsColumn
	|checkoutButton |
	cartContentsList _ 
		PluggableListMorph model: self model
								listGetter: #cartContentsAsOrderedCollection
								indexGetter: #cartContentsIndex
								indexSetter: #cartContentsIndex:.
	catalogList morphHeight: self listHeight.
	
	checkoutButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #goToCheckout
									label: 'Checkout'.
									
	subtotalText _ StringMorph contents: 'Total: $0'.
	
	errorTextBox _ StringMorph contents: ''.
	
		     
	^ (LayoutMorph newColumn)
		    padding: #left;
		    separation: 15;
		    addMorph: (StringMorph contents: 'Tu carrito:');
		    addMorph: cartContentsList;
    	    addMorph: checkoutButton;
  	          addMorph: subtotalText;
		    addMorph: errorTextBox .
		! !
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:07:50'!
listHeight
	^280.! !

CreateCartWindow open.!
!StoreWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:08:07' prior: 50797797!
buildCartContentsColumn
	|checkoutButton |
	cartContentsList _ 
		PluggableListMorph model: self model
								listGetter: #cartContentsAsOrderedCollection
								indexGetter: #cartContentsIndex
								indexSetter: #cartContentsIndex:.
	cartContentsList morphHeight: self listHeight.
	
	checkoutButton _ 
		PluggableButtonMorph model: self model
									stateGetter: nil
									action: #goToCheckout
									label: 'Checkout'.
									
	subtotalText _ StringMorph contents: 'Total: $0'.
	
	errorTextBox _ StringMorph contents: ''.
	
		     
	^ (LayoutMorph newColumn)
		    padding: #left;
		    separation: 15;
		    addMorph: (StringMorph contents: 'Tu carrito:');
		    addMorph: cartContentsList;
    	    addMorph: checkoutButton;
  	          addMorph: subtotalText;
		    addMorph: errorTextBox .
		! !

CreateCartWindow open.!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:09:11'!
textBoxHeight
	^30.! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:09:24' prior: 50797611!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue;
		morphHeight: self textBoxHeight .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #ownersName
		textSetter: #ownersName: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	expirationDateTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #expirationDate
		textSetter: #expirationDate: .
	expirationDateTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateTextBox textMorph acceptContents 
		].
	expirationDateTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #doCheckout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date (mm/yyyy)');
		addMorph: expirationDateTextBox ;
		addMorph: payButton .
			
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:09:39' prior: 50797863!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue;
		morphHeight: self textBoxHeight .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #ownersName
		textSetter: #ownersName: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue ;
		morphHeight: self textBoxHeight .
		
	expirationDateTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #expirationDate
		textSetter: #expirationDate: .
	expirationDateTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateTextBox textMorph acceptContents 
		].
	expirationDateTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue ;
		morphHeight: self textBoxHeight .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #doCheckout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date (mm/yyyy)');
		addMorph: expirationDateTextBox ;
		addMorph: payButton .
			
	! !

CreateCartWindow open.!
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:11:01'!
test01CreditCardNmuberEmpiezaVacio
	
	self assert: checkoutModel creditCardNumber equals: ''.
 ! !

CheckOutWindowModelTest removeSelector: #test01!
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:11:16'!
test02PuedoCambiarElValorDeCreditCardNumber
	
	checkoutModel creditCardNumber: '123tteeoo'.
	self assert: checkoutModel creditCardNumber equals: '123tteeoo'.
 ! !

CheckOutWindowModelTest removeSelector: #test02!
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:11:25'!
test03OwnersNameEmpiezaVacio
	
	self assert: checkoutModel ownersName equals: ''.
 ! !

CheckOutWindowModelTest removeSelector: #test03!
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:11:51'!
test06PuedoCambiarElValorDeExpirationDate
	
	checkoutModel expirationDate: '123tteeoo'.
	self assert: checkoutModel expirationDate equals: '123tteeoo'.
 ! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 00:15:55' prior: 50797519!
test04
	
	checkoutModel ownersName: '123tteeoo'.
	self assert: checkoutModel ownersName equals: '123tteeoo'.
 ! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:12:09'!
test04PuedoCambiarElValorDeOwnersName
	
	checkoutModel ownersName: '123tteeoo'.
	self assert: checkoutModel ownersName equals: '123tteeoo'.
 ! !

CheckOutWindowModelTest removeSelector: #test04!
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:12:18'!
test05ExpirationDateEmpiezaVacio
	
	self assert: checkoutModel expirationDate equals: ''.
 ! !

CheckOutWindowModelTest removeSelector: #test05!

!classDefinition: #CheckOutWindowModelTest category: #'TusLibros-Web'!
TestCase subclass: #CheckOutWindowModelTest
	instanceVariableNames: 'checkoutModel checkoutWebClientRequestBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindowModelTest methodsFor: 'nil' stamp: 'tf 7/11/2019 09:13:30'!
test07AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiTodoSaleBien
	| storeModel counter |
	
	counter _ 0.
	checkoutWebClientRequestBlock _ [:anAmount :aBookISBN :aCartId |
		self assert: anAmount equals: 1. 
		self assert: aBookISBN equals: 'harry potter'. 
		self assert: aCartId equals: 24. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.
	self assert: storeModel cartContents equals: (Bag with: 'harry potter'). ! !

07/2020.!

Month readFrom: ('07/2020' readStream ).!
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:15:56' prior: 50798038!
test07AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiTodoSaleBien
	| storeModel counter |
	
	counter _ 0.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self assert: cartId equals: 23. 
		self assert: ccNumber equals: '0123012301230123'. 
		self assert: expirationDate equals:  nil. 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.
	self assert: storeModel cartContents equals: (Bag with: 'harry potter'). ! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:16:06' prior: 50798066!
test07AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiTodoSaleBien
	| storeModel counter |
	
	counter _ 0.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self assert: cartId equals: 23. 
		self assert: ccNumber equals: '0123012301230123'. 
		self assert: expirationDate equals:  (Month month: 07 year: 2020) . 
		counter _ counter + 1.
	].
	
	storeModel _ StoreWindowModel withWebClient: self cartId: 24  username: 'Valid'  andPassword: 'ValidP'.
	

	storeModel when: #cartContentsUpdated evaluate: [counter _ counter + 1].
	storeModel catalog.
	storeModel catalogIndex: 1.
	
	storeModel addToCart.
	
	self assert: counter equals: 2.
	self assert: storeModel cartContents equals: (Bag with: 'harry potter'). ! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:20:14' prior: 50798093!
test07AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiTodoSaleBien
	| storeModel counter |
	
	counter _ 0.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self assert: cartId equals: 23. 
		self assert: ccNumber equals: '0123012301230123'. 
		self assert: ownersName equals: 'Teo Freund'.
		self assert: expirationDate equals:  (Month month: 07 year: 2020) . 
		counter _ counter + 1.
	].
	
	storeModel _ CheckOutWindowModel withWebClient: self cartId: 23  username: 'valid'  password: 'validP'. 
	

	storeModel when: #paymentDone evaluate: [counter _ counter + 1].
	storeModel creditCardNumber: '0123012301230123'.
	storeModel ownersName: 'Teo Freund'.
	storeModel expirationDate: '07/2020'.
	
	storeModel checkout.
	
	self assert: counter equals: 2.
	self assert: storeModel creditCardNumber equals: '************0123'.
	! !
!CheckOutWindowModel class methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:20:23'!
withWebClient: aCheckOutWindowModelTest cartId: aSmallInteger username: aString password: aString4 
	self shouldBeImplemented.! !
!CheckOutWindowModel class methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:21:08' prior: 50798152!
withWebClient: aWebClient cartId: aCartId username: aUsername password: aPassword
	^self new initializeWithWebClient: aWebClient cartId: aCartId  username: aUsername  password: aPassword .
	! !
!CheckOutWindowModel class methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:21:36' prior: 50796415!
withCartId: aCartId username: aUsername password: aPassword 
	^self  initializeWithWebClient: TusLibrosWebClient new cartId: aCartId username: aUsername password: aPassword .! !

!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId username password creditCardNumber ownersName expirationDate webClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:21:58'!
initializeWithWebClient: aWebClient cartId: aCartId username: aUsername password: aPassword 
	webClient _ aWebClient .
	cartId _ aCartId .
	username _ aUsername .
	password _ aPassword .
	
	creditCardNumber _ ''.
	ownersName _ ''.
	expirationDate _ ''.! !

CheckOutWindowModel removeSelector: #initializeWithCartId:username:password:!
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:22:25' prior: 50796960!
setUp
	
	checkoutModel _ 
		CheckOutWindowModel 
			withWebClient: self
			cartId: self cartId 
			username: self username 
			password: self password. ! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:23:15' prior: 50798121!
test07AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiTodoSaleBien
	| checkoutModel2 counter |
	
	counter _ 0.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self assert: cartId equals: 23. 
		self assert: ccNumber equals: '0123012301230123'. 
		self assert: ownersName equals: 'Teo Freund'.
		self assert: expirationDate equals:  (Month month: 07 year: 2020) . 
		counter _ counter + 1.
	].
	
	checkoutModel2 _ CheckOutWindowModel withWebClient: self cartId: 23  username: 'valid'  password: 'validP'. 
	

	checkoutModel2 when: #paymentDone evaluate: [counter _ counter + 1].
	checkoutModel2 creditCardNumber: '0123012301230123'.
	checkoutModel2 ownersName: 'Teo Freund'.
	checkoutModel2 expirationDate: '07/2020'.
	
	checkoutModel2 checkout.
	
	self assert: counter equals: 2.
	self assert: checkoutModel2 creditCardNumber equals: '************0123'.
	! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:23:31' prior: 50798211!
test07AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiTodoSaleBien
	|  counter |
	
	counter _ 0.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self assert: cartId equals: 23. 
		self assert: ccNumber equals: '0123012301230123'. 
		self assert: ownersName equals: 'Teo Freund'.
		self assert: expirationDate equals:  (Month month: 07 year: 2020) . 
		counter _ counter + 1.
	].
	
	checkoutModel _ CheckOutWindowModel withWebClient: self cartId: 23  username: 'valid'  password: 'validP'. 
	

	checkoutModel when: #paymentDone evaluate: [counter _ counter + 1].
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	
	checkoutModel checkout.
	
	self assert: counter equals: 2.
	self assert: checkoutModel creditCardNumber equals: '************0123'.
	! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:23:40' prior: 50798243!
test07AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiTodoSaleBien
	|  counter |
	
	counter _ 0.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self assert: cartId equals: 23. 
		self assert: ccNumber equals: '0123012301230123'. 
		self assert: ownersName equals: 'Teo Freund'.
		self assert: expirationDate equals:  (Month month: 07 year: 2020) . 
		counter _ counter + 1.
	].
	

	checkoutModel when: #paymentDone evaluate: [counter _ counter + 1].
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	
	checkoutModel checkout.
	
	self assert: counter equals: 2.
	self assert: checkoutModel creditCardNumber equals: '************0123'.
	! !

'gola' class!

'gola' class last: 2 !

'gola'  last: 2 !
!CheckOutWindowModel methodsFor: 'nil' stamp: 'tf 7/11/2019 09:27:25'!
checkout
	[
		webClient checkOutCartIdentifiedAs: cartId 
					withCreditCardNumbered:  creditCardNumber 
					ownedBy: ownersName  
					expiringOn: (Month readFrom: expirationDate readStream).
		creditCardNumber _ creditCardNumber last: 4.
		self triggerEvent: #paymentDone.
	] on: Error 
	do: [].! !
!CheckOutWindowModelTest methodsFor: 'nil' stamp: 'tf 7/11/2019 09:30:43'!
checkOutCartIdentifiedAs: aCartId 
withCreditCardNumbered: aCreditCartNumber 
ownedBy: anOwner 
expiringOn: anExpirationMonthOfYear
	^checkoutWebClientRequestBlock 
		value: aCartId 
		value: aCreditCartNumber  
		value: anOwner  
		value: anExpirationMonthOfYear .! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:30:56' prior: 50798275!
test07AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiTodoSaleBien
	|  counter |
	
	counter _ 0.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self assert: cartId equals: 23. 
		self assert: ccNumber equals: '0123012301230123'. 
		self assert: ownersName equals: 'Teo Freund'.
		self assert: expirationDate equals:  (Month month: 07 year: 2020) . 
		counter _ counter + 1.
	].
	

	checkoutModel when: #paymentDone evaluate: [counter _ counter + 1].
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	
	checkoutModel checkout.
	
	self assert: counter equals: 2.
	self assert: checkoutModel creditCardNumber equals: '0123'.
	! !

----SNAPSHOT----(11 July 2019 09:31:31) TusLibros-Web.image priorSource: 14908852!
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:33:08'!
test08AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiHayUnError
	|  counter |
	
	counter _ 0.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self error: 'Error!!'.
	].
	

	checkoutModel when: #paymentDone evaluate: [counter _ counter + 1].
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	
	checkoutModel checkout.
	
	self assert: counter equals: 2.
	self assert: checkoutModel creditCardNumber equals: '0123'.
	! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:34:05' prior: 50798358!
test08AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiHayUnError
	|  error |
	
	error _ 0.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self error: 'Error!!'.
	].
	

	checkoutModel when: #paymentFailed: evaluate: [:anError | error _ anError].
	
	checkoutModel checkout.
	
	self assert: error equals: 'Error!!'.

	! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:34:35' prior: 50798304!
checkout
	[
		webClient checkOutCartIdentifiedAs: cartId 
					withCreditCardNumbered:  creditCardNumber 
					ownedBy: ownersName  
					expiringOn: (Month readFrom: expirationDate readStream).
		creditCardNumber _ creditCardNumber last: 4.
		self triggerEvent: #paymentDone.
	] on: Error 
	do: [:anError | self triggerEvent: #paymentFailed with: anError messageText ].! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:35:13' prior: 50798379!
test08AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiHayUnError
	|  error |
	
	error _ ''.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self error: 'Error!!'.
	].
	

	checkoutModel when: #paymentFailed: evaluate: [:anError | error _ anError].
	
	checkoutModel checkout.
	
	self assert: error equals: 'Error!!'.

	! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:36:39' prior: 50798410!
test08AlPagarSeHaceElRequestAlWebClientYSeLevantaElEventoCorrespondienteSiHayUnError
	|  error |
	
	error _ ''.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |
		self error: 'Error!!'.
	].
	

	checkoutModel when: #paymentFailed: evaluate: [:anError | error _ anError].
	
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	checkoutModel checkout.
	
	self assert: error equals: 'Error!!'.

	! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:39:18' prior: 50798394!
checkout
	[
		webClient checkOutCartIdentifiedAs: cartId 
					withCreditCardNumbered:  creditCardNumber 
					ownedBy: ownersName  
					expiringOn: (Month readFrom: expirationDate readStream).
		creditCardNumber _ creditCardNumber last: 4.
		self triggerEvent: #paymentDone.
	] on: Error 
	do: [:anError | self triggerEvent: #paymentFailed: with: anError messageText ].! !

a _ (LayoutMorph newColumn ) addMorph: (StringMorph contents: 'vdaj').!

Panel open: a.!

EditPanel open: a.!

LayoutMorphEditPanel open: a.!

LayoutMorphEditPanel open: a.!

SubstringsClientWindow open !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:52:01'!
test09TranscriptEmpiezaVacio
	
	self assert: checkoutModel transcript isEmpty.
 ! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:52:51'!
buildTranscriptColumn
	
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Transcript:');
		addMorph: transcriptList;
		yourself.
			
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:53:37' prior: 50798473!
buildTranscriptColumn

	transcriptList _ PluggableListMorph model: self model
								listGetter: #transcript
								indexGetter: nil
								indexSetter: nil.
	transcriptList morphHeight: self textBoxHeight *4.
	
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Transcript:');
		addMorph: transcriptList;
		yourself.
			
	! !

CreateCartWindow open.!
!CheckOutWindowModel class methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:55:12' prior: 50798170!
withCartId: aCartId username: aUsername password: aPassword 
	^self  withWebClient: TusLibrosWebClient new cartId: aCartId username: aUsername password: aPassword .! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:56:00' prior: 50797916!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue;
		morphHeight: self textBoxHeight .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #ownersName
		textSetter: #ownersName: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue ;
		morphHeight: self textBoxHeight .
		
	expirationDateTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #expirationDate
		textSetter: #expirationDate: .
	expirationDateTextBox textMorph 
		setProperty: #keyStroke 
		toValue: [:key |
			expirationDateTextBox textMorph acceptContents 
		].
	expirationDateTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue ;
		morphHeight: self textBoxHeight .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #checkout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date (mm/yyyy)');
		addMorph: expirationDateTextBox ;
		addMorph: payButton .
			
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:56:15' prior: 50797545!
buildMorphicWindow
	self layoutMorph beRow;
		 separation: 15;
		 padding: #left;
		 addMorph: self buildCheckOutColumn;
		addMorph: self buildTranscriptColumn .! !

CreateCartWindow open.!
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:56:39'!
transcript
	self shouldBeImplemented.! !

!classDefinition: #CheckOutWindowModel category: #'TusLibros-Web'!
Object subclass: #CheckOutWindowModel
	instanceVariableNames: 'cartId username password creditCardNumber ownersName expirationDate webClient transcript'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:56:48' prior: 50798572!
transcript
	^transcript.! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:57:01' prior: 50798188!
initializeWithWebClient: aWebClient cartId: aCartId username: aUsername password: aPassword 
	webClient _ aWebClient .
	cartId _ aCartId .
	username _ aUsername .
	password _ aPassword .
	
	creditCardNumber _ ''.
	ownersName _ ''.
	expirationDate _ ''.
	transcript _ OrderedCollection new.! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:57:34' prior: 50798446!
checkout
self halt.
	[
		webClient checkOutCartIdentifiedAs: cartId 
					withCreditCardNumbered:  creditCardNumber 
					ownedBy: ownersName  
					expiringOn: (Month readFrom: expirationDate readStream).
		creditCardNumber _ creditCardNumber last: 4.
		self triggerEvent: #paymentDone.
	] on: Error 
	do: [:anError | self triggerEvent: #paymentFailed: with: anError messageText ].! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 09:58:44' prior: 50798507!
buildCheckOutColumn
	creditCardNumberTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #creditCardNumber
		textSetter: #creditCardNumber: .
	creditCardNumberTextBox textMorph 
		setProperty: #keyStroke: 
		toValue: [:key |
			creditCardNumberTextBox textMorph acceptContents 
		].
	creditCardNumberTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue;
		morphHeight: self textBoxHeight .
		
	ownersNameTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #ownersName
		textSetter: #ownersName: .
	ownersNameTextBox textMorph 
		setProperty: #keyStroke: 
		toValue: [:key |
			ownersNameTextBox textMorph acceptContents 
		].
	ownersNameTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue ;
		morphHeight: self textBoxHeight .
		
	expirationDateTextBox _ TextModelMorph 
		textProvider: self model 
		textGetter:  #expirationDate
		textSetter: #expirationDate: .
	expirationDateTextBox textMorph 
		setProperty: #keyStroke: 
		toValue: [:key |
			expirationDateTextBox textMorph acceptContents 
		].
	expirationDateTextBox 
		borderWidth: 1;
		borderColor: Color skyBlue ;
		morphHeight: self textBoxHeight .
		
	payButton _
		PluggableButtonMorph model: self model 
									stateGetter: nil 
									action: #checkout 
									label: 'Pay'. 
		
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Credit card number:');
		addMorph: creditCardNumberTextBox ;
		addMorph: (StringMorph contents: 'Owners name:');
		addMorph: ownersNameTextBox ;
		addMorph: (StringMorph contents: 'Expiration Date (mm/yyyy)');
		addMorph: expirationDateTextBox ;
		addMorph: payButton .
			
	! !

CreateCartWindow open.!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:00:05' prior: 50796377!
initializeWith: aTitle cartId: cartId username: username password: password
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (CheckOutWindowModel withCartId: cartId username: username password: password);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	self model when: #paymentDone
				send: #updateTranscript
				to: self.! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:00:26' prior: 50798676!
initializeWith: aTitle cartId: cartId username: username password: password
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (CheckOutWindowModel withCartId: cartId username: username password: password);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	self model when: #paymentDone
				send: #updateTranscript
				to: self.
	self model when: #paymentFailed
				send: #showError:
				to: self.! !

!classDefinition: #CheckOutWindow category: #'TusLibros-Web'!
Panel subclass: #CheckOutWindow
	instanceVariableNames: 'creditCardNumberTextBox ownersNameTextBox payButton transcriptList expirationDateTextBox errorTextBox'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Web'!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:00:55' prior: 50798482!
buildTranscriptColumn

	transcriptList _ PluggableListMorph model: self model
								listGetter: #transcript
								indexGetter: nil
								indexSetter: nil.
	transcriptList morphHeight: self textBoxHeight *6.
	
	errorTextBox _ StringMorph contents: ''.
	
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Transcript:');
		addMorph: transcriptList;
		yourself.
			
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:01:17'!
showError: anErrorMessage
	errorTextBox contents: 'Error: ', anErrorMessage .! !

CreateCartWindow open.!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:02:35' prior: 50798692!
initializeWith: aTitle cartId: cartId username: username password: password
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (CheckOutWindowModel withCartId: cartId username: username password: password);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	self model when: #paymentDone
				send: #updateTranscript
				to: self.
	self model when: #paymentFailed:
				send: #showError:
				to: self.! !

CreateCartWindow open.!
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:03:04' prior: 50798604!
checkout

	[
		webClient checkOutCartIdentifiedAs: cartId 
					withCreditCardNumbered:  creditCardNumber 
					ownedBy: ownersName  
					expiringOn: (Month readFrom: expirationDate readStream).
		creditCardNumber _ creditCardNumber last: 4.
		self triggerEvent: #paymentDone.
	] on: Error 
	do: [:anError | self triggerEvent: #paymentFailed: with: anError messageText ].! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:06:57' prior: 50798735!
showError: anErrorMessage
	self halt.
	errorTextBox contents: 'Error: ', anErrorMessage .! !

CreateCartWindow open.!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:07:51' prior: 50798719!
buildTranscriptColumn

	transcriptList _ PluggableListMorph model: self model
								listGetter: #transcript
								indexGetter: nil
								indexSetter: nil.
	transcriptList morphHeight: self textBoxHeight *6.
	
	errorTextBox _ StringMorph contents: ''.
	
	^(LayoutMorph newColumn )
		padding: #left;
		separation: 15;
		addMorph: (StringMorph contents: 'Transcript:');
		addMorph: transcriptList;
		addMorph: errorTextBox ;
		yourself.
			
	! !

CreateCartWindow open.!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:07:58' prior: 50798776!
showError: anErrorMessage

	errorTextBox contents: 'Error: ', anErrorMessage .! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:09:19'!
updateTranscript
	transcriptList updateList.! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:09:37' prior: 50798761!
checkout

	[
		webClient checkOutCartIdentifiedAs: cartId 
					withCreditCardNumbered:  creditCardNumber 
					ownedBy: ownersName  
					expiringOn: (Month readFrom: expirationDate readStream).
		creditCardNumber _ creditCardNumber last: 4.
		transcript _ OrderedCollection with: 'hola'.
		self triggerEvent: #paymentDone.
	] on: Error 
	do: [:anError | self triggerEvent: #paymentFailed: with: anError messageText ].! !

CreateCartWindow open.!

DateAndTime today .!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:18:26'!
updateTranscriptAndConfidentialInformation
	transcriptList updateList.! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:18:26' prior: 50798742!
initializeWith: aTitle cartId: cartId username: username password: password
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (CheckOutWindowModel withCartId: cartId username: username password: password);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	self model when: #paymentDone
				send: #updateTranscriptAndConfidentialInformation
				to: self.
	self model when: #paymentFailed:
				send: #showError:
				to: self.! !

CheckOutWindow removeSelector: #updateTranscript!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:18:48' prior: 50798830!
updateTranscriptAndConfidentialInformation
	transcriptList updateList.
	creditCardNumberTextBox updateActualContents.! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:18:56'!
test10DespuesDeEfectuarElPagoSeActualizaElTranscript
	|  counter |
	
	counter _ 0.
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |].
	

	checkoutModel when: #paymentDone evaluate: [].
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	
	checkoutModel checkout.
	

	self assert: checkoutModel transcript equals: nil.
	! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:19:06' prior: 50798863!
test10DespuesDeEfectuarElPagoSeActualizaElTranscript

	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |].
	

	checkoutModel when: #paymentDone evaluate: [].
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	
	checkoutModel checkout.
	

	self assert: checkoutModel transcript equals: nil.
	! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:20:03' prior: 50798812!
checkout

	[
		webClient checkOutCartIdentifiedAs: cartId 
					withCreditCardNumbered:  creditCardNumber 
					ownedBy: ownersName  
					expiringOn: (Month readFrom: expirationDate readStream).
		creditCardNumber _ creditCardNumber last: 4.
		self triggerEvent: #paymentDone.
		transcript _ webClient listPurchasesOf: username authenticatingWith: password .
		self triggerEvent: #updateTranscript.
		
	] on: Error 
	do: [:anError | self triggerEvent: #paymentFailed: with: anError messageText ].! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:20:18'!
updateTranscript
	transcriptList updateList.
	creditCardNumberTextBox updateActualContents.! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:20:18' prior: 50798836!
initializeWith: aTitle cartId: cartId username: username password: password
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (CheckOutWindowModel withCartId: cartId username: username password: password);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	self model when: #paymentDone
				send: #updateTranscript
				to: self.
	self model when: #paymentFailed:
				send: #showError:
				to: self.! !

CheckOutWindow removeSelector: #updateTranscriptAndConfidentialInformation!
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:20:22' prior: 50798917!
updateTranscript
	transcriptList updateList.
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:20:51'!
paymentDone
	creditCardNumberTextBox updateActualContents.
	errorTextBox contents: 'Payment Done'.
	! !
!CheckOutWindow methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:21:09' prior: 50798924!
initializeWith: aTitle cartId: cartId username: username password: password
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle;
		 model: (CheckOutWindowModel withCartId: cartId username: username password: password);
		 morphExtent: 640@480;
		 buildMorphicWindow;
		 openInWorld.
	self model when: #paymentDone
				send: #paymentDone
				to: self.
	self model when: #updateTranscript
				send: #updateTranscript
				to: self.
	self model when: #paymentFailed:
				send: #showError:
				to: self.! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:21:37' prior: 50798881!
test10DespuesDeEfectuarElPagoSeActualizaElTranscript

	| flag |
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |].
	

	flag _ false.
	checkoutModel when: #updateTranscript evaluate: [flag _ true].
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	
	checkoutModel checkout.
	

	self assert: checkoutModel transcript equals: nil.
	! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:21:45' prior: 50798976!
test10DespuesDeEfectuarElPagoSeActualizaElTranscript

	| flag |
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |].
	

	flag _ false.
	checkoutModel when: #updateTranscript evaluate: [flag _ true].
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	
	checkoutModel checkout.
	

	self assert: flag.
	self assert: checkoutModel transcript equals: nil.
	! !
!CheckOutWindowModelTest methodsFor: 'nil' stamp: 'tf 7/11/2019 10:25:15'!
listPurchasesOf: username authenticatingWith: password
	^Dictionary new at: 'valid' put: 200; at: 'harry potter' put: 120; yourself. ! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:26:01' prior: 50798994!
test10DespuesDeEfectuarElPagoSeActualizaElTranscript

	| flag |
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |].
	

	flag _ false.
	checkoutModel when: #updateTranscript evaluate: [flag _ true].
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	
	checkoutModel checkout.
	

	self assert: flag.
	self assert: checkoutModel transcript equals: (OrderedCollection with: 'valid $200' with: 'harry potter $120').
	! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:26:58' prior: 50798898!
checkout

	[
		webClient checkOutCartIdentifiedAs: cartId 
					withCreditCardNumbered:  creditCardNumber 
					ownedBy: ownersName  
					expiringOn: (Month readFrom: expirationDate readStream).
		creditCardNumber _ creditCardNumber last: 4.
		self triggerEvent: #paymentDone.
		self updateTranscript.
		self triggerEvent: #updateTranscript.
		
	] on: Error 
	do: [:anError | self triggerEvent: #paymentFailed: with: anError messageText ].! !
!CheckOutWindowModel methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:27:52'!
updateTranscript
	| originalTranscript |
	originalTranscript _ webClient listPurchasesOf: username authenticatingWith: password .
	
	transcript _ OrderedCollection new.
	originalTranscript keysAndValuesDo: [:key :value | transcript add: key, ' $', value printString ].! !
!CheckOutWindowModelTest methodsFor: 'as yet unclassified' stamp: 'tf 7/11/2019 10:28:27' prior: 50799020!
test10DespuesDeEfectuarElPagoSeActualizaElTranscript

	| flag |
	checkoutWebClientRequestBlock _ [:cartId :ccNumber :ownersName :expirationDate |].
	

	flag _ false.
	checkoutModel when: #updateTranscript evaluate: [flag _ true].
	checkoutModel creditCardNumber: '0123012301230123'.
	checkoutModel ownersName: 'Teo Freund'.
	checkoutModel expirationDate: '07/2020'.
	
	checkoutModel checkout.
	

	self assert: flag.
	self assert: checkoutModel transcript equals: (OrderedCollection with: 'harry potter $120' with: 'valid $200').
	! !

----SNAPSHOT----(11 July 2019 10:28:48) TusLibros-Web.image priorSource: 14934530!

CreateCartWindow open.!

CreateCartWindow open.!

CreateCartWindow open.!

----SNAPSHOT----(11 July 2019 10:32:48) TusLibros-Web.image priorSource: 14958005!

----QUIT----(11 July 2019 10:32:54) TusLibros-Web.image priorSource: 14958164!